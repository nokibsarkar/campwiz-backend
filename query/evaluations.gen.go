// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nokib/campwiz/models"
	"nokib/campwiz/repository/cache"

	"nokib/campwiz/models/types"
)

func newEvaluation(db *gorm.DB, opts ...gen.DOOption) evaluation {
	_evaluation := evaluation{}

	_evaluation.evaluationDo.UseDB(db, opts...)
	_evaluation.evaluationDo.UseModel(&models.Evaluation{})

	tableName := _evaluation.evaluationDo.TableName()
	_evaluation.ALL = field.NewAsterisk(tableName)
	_evaluation.EvaluationID = field.NewString(tableName, "evaluation_id")
	_evaluation.SubmissionID = field.NewString(tableName, "submission_id")
	_evaluation.JudgeID = field.NewString(tableName, "judge_id")
	_evaluation.ParticipantID = field.NewString(tableName, "participant_id")
	_evaluation.RoundID = field.NewString(tableName, "round_id")
	_evaluation.Type = field.NewString(tableName, "type")
	_evaluation.Score = field.NewFloat64(tableName, "score")
	_evaluation.Comment = field.NewString(tableName, "comment")
	_evaluation.Serial = field.NewUint(tableName, "serial")
	_evaluation.CreatedAt = field.NewTime(tableName, "created_at")
	_evaluation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_evaluation.EvaluatedAt = field.NewTime(tableName, "evaluated_at")
	_evaluation.SkipExpirationAt = field.NewTime(tableName, "skip_expiration_at")
	_evaluation.DistributionTaskID = field.NewString(tableName, "distribution_task_id")
	_evaluation.Submission = evaluationBelongsToSubmission{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Submission", "models.Submission"),
		Participant: struct {
			field.RelationField
			LeadingProject struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Submission.Participant", "models.User"),
			LeadingProject: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Submission.Participant.LeadingProject", "models.Project"),
			},
		},
		Submitter: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Submission.Submitter", "models.User"),
		},
		Campaign: struct {
			field.RelationField
			CreatedBy struct {
				field.RelationField
			}
			Project struct {
				field.RelationField
			}
			Roles struct {
				field.RelationField
				Campaign struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
				Round struct {
					field.RelationField
					Campaign struct {
						field.RelationField
					}
					Creator struct {
						field.RelationField
					}
					DependsOnRound struct {
						field.RelationField
					}
					Roles struct {
						field.RelationField
					}
				}
				Project struct {
					field.RelationField
				}
			}
			Rounds struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Submission.Campaign", "models.Campaign"),
			CreatedBy: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Submission.Campaign.CreatedBy", "models.User"),
			},
			Project: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Submission.Campaign.Project", "models.Project"),
			},
			Roles: struct {
				field.RelationField
				Campaign struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
				Round struct {
					field.RelationField
					Campaign struct {
						field.RelationField
					}
					Creator struct {
						field.RelationField
					}
					DependsOnRound struct {
						field.RelationField
					}
					Roles struct {
						field.RelationField
					}
				}
				Project struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Submission.Campaign.Roles", "models.Role"),
				Campaign: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Submission.Campaign.Roles.Campaign", "models.Campaign"),
				},
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Submission.Campaign.Roles.User", "models.User"),
				},
				Round: struct {
					field.RelationField
					Campaign struct {
						field.RelationField
					}
					Creator struct {
						field.RelationField
					}
					DependsOnRound struct {
						field.RelationField
					}
					Roles struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Submission.Campaign.Roles.Round", "models.Round"),
					Campaign: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Submission.Campaign.Roles.Round.Campaign", "models.Campaign"),
					},
					Creator: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Submission.Campaign.Roles.Round.Creator", "models.User"),
					},
					DependsOnRound: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Submission.Campaign.Roles.Round.DependsOnRound", "models.Round"),
					},
					Roles: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Submission.Campaign.Roles.Round.Roles", "models.Role"),
					},
				},
				Project: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Submission.Campaign.Roles.Project", "models.Project"),
				},
			},
			Rounds: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Submission.Campaign.Rounds", "models.Round"),
			},
		},
		Round: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Submission.Round", "models.Round"),
		},
		DistributionTask: struct {
			field.RelationField
			Submittor struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Submission.DistributionTask", "models.Task"),
			Submittor: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Submission.DistributionTask.Submittor", "models.User"),
			},
		},
		ImportTask: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Submission.ImportTask", "models.Task"),
		},
	}

	_evaluation.Participant = evaluationBelongsToParticipant{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Participant", "models.User"),
	}

	_evaluation.Judge = evaluationBelongsToJudge{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Judge", "models.Role"),
	}

	_evaluation.fillFieldMap()

	return _evaluation
}

type evaluation struct {
	evaluationDo

	ALL                field.Asterisk
	EvaluationID       field.String
	SubmissionID       field.String
	JudgeID            field.String
	ParticipantID      field.String
	RoundID            field.String
	Type               field.String
	Score              field.Float64
	Comment            field.String
	Serial             field.Uint
	CreatedAt          field.Time
	UpdatedAt          field.Time
	EvaluatedAt        field.Time
	SkipExpirationAt   field.Time
	DistributionTaskID field.String
	Submission         evaluationBelongsToSubmission

	Participant evaluationBelongsToParticipant

	Judge evaluationBelongsToJudge

	fieldMap map[string]field.Expr
}

func (e evaluation) Table(newTableName string) *evaluation {
	e.evaluationDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e evaluation) As(alias string) *evaluation {
	e.evaluationDo.DO = *(e.evaluationDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *evaluation) updateTableName(table string) *evaluation {
	e.ALL = field.NewAsterisk(table)
	e.EvaluationID = field.NewString(table, "evaluation_id")
	e.SubmissionID = field.NewString(table, "submission_id")
	e.JudgeID = field.NewString(table, "judge_id")
	e.ParticipantID = field.NewString(table, "participant_id")
	e.RoundID = field.NewString(table, "round_id")
	e.Type = field.NewString(table, "type")
	e.Score = field.NewFloat64(table, "score")
	e.Comment = field.NewString(table, "comment")
	e.Serial = field.NewUint(table, "serial")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.EvaluatedAt = field.NewTime(table, "evaluated_at")
	e.SkipExpirationAt = field.NewTime(table, "skip_expiration_at")
	e.DistributionTaskID = field.NewString(table, "distribution_task_id")

	e.fillFieldMap()

	return e
}

func (e *evaluation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *evaluation) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 17)
	e.fieldMap["evaluation_id"] = e.EvaluationID
	e.fieldMap["submission_id"] = e.SubmissionID
	e.fieldMap["judge_id"] = e.JudgeID
	e.fieldMap["participant_id"] = e.ParticipantID
	e.fieldMap["round_id"] = e.RoundID
	e.fieldMap["type"] = e.Type
	e.fieldMap["score"] = e.Score
	e.fieldMap["comment"] = e.Comment
	e.fieldMap["serial"] = e.Serial
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["evaluated_at"] = e.EvaluatedAt
	e.fieldMap["skip_expiration_at"] = e.SkipExpirationAt
	e.fieldMap["distribution_task_id"] = e.DistributionTaskID

}

func (e evaluation) clone(db *gorm.DB) evaluation {
	e.evaluationDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e evaluation) replaceDB(db *gorm.DB) evaluation {
	e.evaluationDo.ReplaceDB(db)
	return e
}

type evaluationBelongsToSubmission struct {
	db *gorm.DB

	field.RelationField

	Participant struct {
		field.RelationField
		LeadingProject struct {
			field.RelationField
		}
	}
	Submitter struct {
		field.RelationField
	}
	Campaign struct {
		field.RelationField
		CreatedBy struct {
			field.RelationField
		}
		Project struct {
			field.RelationField
		}
		Roles struct {
			field.RelationField
			Campaign struct {
				field.RelationField
			}
			User struct {
				field.RelationField
			}
			Round struct {
				field.RelationField
				Campaign struct {
					field.RelationField
				}
				Creator struct {
					field.RelationField
				}
				DependsOnRound struct {
					field.RelationField
				}
				Roles struct {
					field.RelationField
				}
			}
			Project struct {
				field.RelationField
			}
		}
		Rounds struct {
			field.RelationField
		}
	}
	Round struct {
		field.RelationField
	}
	DistributionTask struct {
		field.RelationField
		Submittor struct {
			field.RelationField
		}
	}
	ImportTask struct {
		field.RelationField
	}
}

func (a evaluationBelongsToSubmission) Where(conds ...field.Expr) *evaluationBelongsToSubmission {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a evaluationBelongsToSubmission) WithContext(ctx context.Context) *evaluationBelongsToSubmission {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a evaluationBelongsToSubmission) Session(session *gorm.Session) *evaluationBelongsToSubmission {
	a.db = a.db.Session(session)
	return &a
}

func (a evaluationBelongsToSubmission) Model(m *models.Evaluation) *evaluationBelongsToSubmissionTx {
	return &evaluationBelongsToSubmissionTx{a.db.Model(m).Association(a.Name())}
}

type evaluationBelongsToSubmissionTx struct{ tx *gorm.Association }

func (a evaluationBelongsToSubmissionTx) Find() (result *models.Submission, err error) {
	return result, a.tx.Find(&result)
}

func (a evaluationBelongsToSubmissionTx) Append(values ...*models.Submission) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a evaluationBelongsToSubmissionTx) Replace(values ...*models.Submission) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a evaluationBelongsToSubmissionTx) Delete(values ...*models.Submission) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a evaluationBelongsToSubmissionTx) Clear() error {
	return a.tx.Clear()
}

func (a evaluationBelongsToSubmissionTx) Count() int64 {
	return a.tx.Count()
}

type evaluationBelongsToParticipant struct {
	db *gorm.DB

	field.RelationField
}

func (a evaluationBelongsToParticipant) Where(conds ...field.Expr) *evaluationBelongsToParticipant {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a evaluationBelongsToParticipant) WithContext(ctx context.Context) *evaluationBelongsToParticipant {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a evaluationBelongsToParticipant) Session(session *gorm.Session) *evaluationBelongsToParticipant {
	a.db = a.db.Session(session)
	return &a
}

func (a evaluationBelongsToParticipant) Model(m *models.Evaluation) *evaluationBelongsToParticipantTx {
	return &evaluationBelongsToParticipantTx{a.db.Model(m).Association(a.Name())}
}

type evaluationBelongsToParticipantTx struct{ tx *gorm.Association }

func (a evaluationBelongsToParticipantTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a evaluationBelongsToParticipantTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a evaluationBelongsToParticipantTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a evaluationBelongsToParticipantTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a evaluationBelongsToParticipantTx) Clear() error {
	return a.tx.Clear()
}

func (a evaluationBelongsToParticipantTx) Count() int64 {
	return a.tx.Count()
}

type evaluationBelongsToJudge struct {
	db *gorm.DB

	field.RelationField
}

func (a evaluationBelongsToJudge) Where(conds ...field.Expr) *evaluationBelongsToJudge {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a evaluationBelongsToJudge) WithContext(ctx context.Context) *evaluationBelongsToJudge {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a evaluationBelongsToJudge) Session(session *gorm.Session) *evaluationBelongsToJudge {
	a.db = a.db.Session(session)
	return &a
}

func (a evaluationBelongsToJudge) Model(m *models.Evaluation) *evaluationBelongsToJudgeTx {
	return &evaluationBelongsToJudgeTx{a.db.Model(m).Association(a.Name())}
}

type evaluationBelongsToJudgeTx struct{ tx *gorm.Association }

func (a evaluationBelongsToJudgeTx) Find() (result *models.Role, err error) {
	return result, a.tx.Find(&result)
}

func (a evaluationBelongsToJudgeTx) Append(values ...*models.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a evaluationBelongsToJudgeTx) Replace(values ...*models.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a evaluationBelongsToJudgeTx) Delete(values ...*models.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a evaluationBelongsToJudgeTx) Clear() error {
	return a.tx.Clear()
}

func (a evaluationBelongsToJudgeTx) Count() int64 {
	return a.tx.Count()
}

type evaluationDo struct{ gen.DO }

type IEvaluationDo interface {
	gen.SubQuery
	Debug() IEvaluationDo
	WithContext(ctx context.Context) IEvaluationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEvaluationDo
	WriteDB() IEvaluationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEvaluationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEvaluationDo
	Not(conds ...gen.Condition) IEvaluationDo
	Or(conds ...gen.Condition) IEvaluationDo
	Select(conds ...field.Expr) IEvaluationDo
	Where(conds ...gen.Condition) IEvaluationDo
	Order(conds ...field.Expr) IEvaluationDo
	Distinct(cols ...field.Expr) IEvaluationDo
	Omit(cols ...field.Expr) IEvaluationDo
	Join(table schema.Tabler, on ...field.Expr) IEvaluationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEvaluationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEvaluationDo
	Group(cols ...field.Expr) IEvaluationDo
	Having(conds ...gen.Condition) IEvaluationDo
	Limit(limit int) IEvaluationDo
	Offset(offset int) IEvaluationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEvaluationDo
	Unscoped() IEvaluationDo
	Create(values ...*models.Evaluation) error
	CreateInBatches(values []*models.Evaluation, batchSize int) error
	Save(values ...*models.Evaluation) error
	First() (*models.Evaluation, error)
	Take() (*models.Evaluation, error)
	Last() (*models.Evaluation, error)
	Find() ([]*models.Evaluation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Evaluation, err error)
	FindInBatches(result *[]*models.Evaluation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Evaluation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEvaluationDo
	Assign(attrs ...field.AssignExpr) IEvaluationDo
	Joins(fields ...field.RelationField) IEvaluationDo
	Preload(fields ...field.RelationField) IEvaluationDo
	FirstOrInit() (*models.Evaluation, error)
	FirstOrCreate() (*models.Evaluation, error)
	FindByPage(offset int, limit int) (result []*models.Evaluation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEvaluationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	DistributeAssigments(judge_id models.IDType, limit int) (rowsAffected int64, err error)
	CountAssignedEvaluations() (result []cache.Evaluation, err error)
	SelectUnAssignedJudges(submission_id types.SubmissionIDType, limit int) (result []*cache.Evaluation, err error)
	RemoveRedundantEvaluation(roundID string, quorum int)
}

// UPDATE `evaluations` SET `judge_id` = @judge_id WHERE `evaluations`.`judge_id` IS NULL AND `evaluations`.`evaluation_id` IN (SELECT MAX(`evaluation_id`) FROM `evaluations` WHERE `submission_id` NOT IN (SELECT DISTINCT submission_id FROM evaluations WHERE `judge_id` = @judge_id) AND `judge_id` IS NULL GROUP BY `submission_id` LIMIT @limit)
func (e evaluationDo) DistributeAssigments(judge_id models.IDType, limit int) (rowsAffected int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, judge_id)
	params = append(params, judge_id)
	params = append(params, limit)
	generateSQL.WriteString("UPDATE `evaluations` SET `judge_id` = ? WHERE `evaluations`.`judge_id` IS NULL AND `evaluations`.`evaluation_id` IN (SELECT MAX(`evaluation_id`) FROM `evaluations` WHERE `submission_id` NOT IN (SELECT DISTINCT submission_id FROM evaluations WHERE `judge_id` = ?) AND `judge_id` IS NULL GROUP BY `submission_id` LIMIT ?) ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	rowsAffected = executeSQL.RowsAffected
	err = executeSQL.Error

	return
}

// SELECT COUNT(`evaluation_id`) AS Count, `judge_id` FROM `evaluations` GROUP BY `judge_id`
func (e evaluationDo) CountAssignedEvaluations() (result []cache.Evaluation, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT COUNT(`evaluation_id`) AS Count, `judge_id` FROM `evaluations` GROUP BY `judge_id` ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM `evaluations` WHERE `judge_id` NOT IN (SELECT judge_id FROM evaluations WHERE `submission_id` = @submission_id AND `judge_id` IS NOT NULL) LIMIT @limit
func (e evaluationDo) SelectUnAssignedJudges(submission_id types.SubmissionIDType, limit int) (result []*cache.Evaluation, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, submission_id)
	params = append(params, limit)
	generateSQL.WriteString("SELECT * FROM `evaluations` WHERE `judge_id` NOT IN (SELECT judge_id FROM evaluations WHERE `submission_id` = ? AND `judge_id` IS NOT NULL) LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM `evaluations` WHERE `evaluations`.`evaluated_at` IS NULL AND `round_id` = @roundID AND `submission_id` IN (SELECT `submission_id` FROM `submissions` WHERE `evaluation_count` <= @quorum` AND `round_id` = @roundID)
func (e evaluationDo) RemoveRedundantEvaluation(roundID string, quorum int) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, roundID)
	params = append(params, quorum)
	params = append(params, roundID)
	generateSQL.WriteString("DELETE FROM `evaluations` WHERE `evaluations`.`evaluated_at` IS NULL AND `round_id` = ? AND `submission_id` IN (SELECT `submission_id` FROM `submissions` WHERE `evaluation_count` <= ?` AND `round_id` = ?) ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	_ = executeSQL

	return
}

func (e evaluationDo) Debug() IEvaluationDo {
	return e.withDO(e.DO.Debug())
}

func (e evaluationDo) WithContext(ctx context.Context) IEvaluationDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e evaluationDo) ReadDB() IEvaluationDo {
	return e.Clauses(dbresolver.Read)
}

func (e evaluationDo) WriteDB() IEvaluationDo {
	return e.Clauses(dbresolver.Write)
}

func (e evaluationDo) Session(config *gorm.Session) IEvaluationDo {
	return e.withDO(e.DO.Session(config))
}

func (e evaluationDo) Clauses(conds ...clause.Expression) IEvaluationDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e evaluationDo) Returning(value interface{}, columns ...string) IEvaluationDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e evaluationDo) Not(conds ...gen.Condition) IEvaluationDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e evaluationDo) Or(conds ...gen.Condition) IEvaluationDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e evaluationDo) Select(conds ...field.Expr) IEvaluationDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e evaluationDo) Where(conds ...gen.Condition) IEvaluationDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e evaluationDo) Order(conds ...field.Expr) IEvaluationDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e evaluationDo) Distinct(cols ...field.Expr) IEvaluationDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e evaluationDo) Omit(cols ...field.Expr) IEvaluationDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e evaluationDo) Join(table schema.Tabler, on ...field.Expr) IEvaluationDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e evaluationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEvaluationDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e evaluationDo) RightJoin(table schema.Tabler, on ...field.Expr) IEvaluationDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e evaluationDo) Group(cols ...field.Expr) IEvaluationDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e evaluationDo) Having(conds ...gen.Condition) IEvaluationDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e evaluationDo) Limit(limit int) IEvaluationDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e evaluationDo) Offset(offset int) IEvaluationDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e evaluationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEvaluationDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e evaluationDo) Unscoped() IEvaluationDo {
	return e.withDO(e.DO.Unscoped())
}

func (e evaluationDo) Create(values ...*models.Evaluation) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e evaluationDo) CreateInBatches(values []*models.Evaluation, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e evaluationDo) Save(values ...*models.Evaluation) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e evaluationDo) First() (*models.Evaluation, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Evaluation), nil
	}
}

func (e evaluationDo) Take() (*models.Evaluation, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Evaluation), nil
	}
}

func (e evaluationDo) Last() (*models.Evaluation, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Evaluation), nil
	}
}

func (e evaluationDo) Find() ([]*models.Evaluation, error) {
	result, err := e.DO.Find()
	return result.([]*models.Evaluation), err
}

func (e evaluationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Evaluation, err error) {
	buf := make([]*models.Evaluation, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e evaluationDo) FindInBatches(result *[]*models.Evaluation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e evaluationDo) Attrs(attrs ...field.AssignExpr) IEvaluationDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e evaluationDo) Assign(attrs ...field.AssignExpr) IEvaluationDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e evaluationDo) Joins(fields ...field.RelationField) IEvaluationDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e evaluationDo) Preload(fields ...field.RelationField) IEvaluationDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e evaluationDo) FirstOrInit() (*models.Evaluation, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Evaluation), nil
	}
}

func (e evaluationDo) FirstOrCreate() (*models.Evaluation, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Evaluation), nil
	}
}

func (e evaluationDo) FindByPage(offset int, limit int) (result []*models.Evaluation, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e evaluationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e evaluationDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e evaluationDo) Delete(models ...*models.Evaluation) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *evaluationDo) withDO(do gen.Dao) *evaluationDo {
	e.DO = *do.(*gen.DO)
	return e
}
