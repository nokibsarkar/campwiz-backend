// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nokib/campwiz/models"
)

func newSubmissionResult(db *gorm.DB, opts ...gen.DOOption) submissionResult {
	_submissionResult := submissionResult{}

	_submissionResult.submissionResultDo.UseDB(db, opts...)
	_submissionResult.submissionResultDo.UseModel(&models.SubmissionResult{})

	tableName := _submissionResult.submissionResultDo.TableName()
	_submissionResult.ALL = field.NewAsterisk(tableName)
	_submissionResult.SubmissionID = field.NewString(tableName, "submission_id")
	_submissionResult.Name = field.NewString(tableName, "name")
	_submissionResult.Author = field.NewString(tableName, "author")
	_submissionResult.Score = field.NewFloat64(tableName, "score")
	_submissionResult.EvaluationCount = field.NewInt(tableName, "evaluation_count")
	_submissionResult.MediaType = field.NewString(tableName, "media_type")

	_submissionResult.fillFieldMap()

	return _submissionResult
}

type submissionResult struct {
	submissionResultDo

	ALL             field.Asterisk
	SubmissionID    field.String
	Name            field.String
	Author          field.String
	Score           field.Float64
	EvaluationCount field.Int
	MediaType       field.String

	fieldMap map[string]field.Expr
}

func (s submissionResult) Table(newTableName string) *submissionResult {
	s.submissionResultDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s submissionResult) As(alias string) *submissionResult {
	s.submissionResultDo.DO = *(s.submissionResultDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *submissionResult) updateTableName(table string) *submissionResult {
	s.ALL = field.NewAsterisk(table)
	s.SubmissionID = field.NewString(table, "submission_id")
	s.Name = field.NewString(table, "name")
	s.Author = field.NewString(table, "author")
	s.Score = field.NewFloat64(table, "score")
	s.EvaluationCount = field.NewInt(table, "evaluation_count")
	s.MediaType = field.NewString(table, "media_type")

	s.fillFieldMap()

	return s
}

func (s *submissionResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *submissionResult) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["submission_id"] = s.SubmissionID
	s.fieldMap["name"] = s.Name
	s.fieldMap["author"] = s.Author
	s.fieldMap["score"] = s.Score
	s.fieldMap["evaluation_count"] = s.EvaluationCount
	s.fieldMap["media_type"] = s.MediaType
}

func (s submissionResult) clone(db *gorm.DB) submissionResult {
	s.submissionResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s submissionResult) replaceDB(db *gorm.DB) submissionResult {
	s.submissionResultDo.ReplaceDB(db)
	return s
}

type submissionResultDo struct{ gen.DO }

type ISubmissionResultDo interface {
	gen.SubQuery
	Debug() ISubmissionResultDo
	WithContext(ctx context.Context) ISubmissionResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubmissionResultDo
	WriteDB() ISubmissionResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubmissionResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubmissionResultDo
	Not(conds ...gen.Condition) ISubmissionResultDo
	Or(conds ...gen.Condition) ISubmissionResultDo
	Select(conds ...field.Expr) ISubmissionResultDo
	Where(conds ...gen.Condition) ISubmissionResultDo
	Order(conds ...field.Expr) ISubmissionResultDo
	Distinct(cols ...field.Expr) ISubmissionResultDo
	Omit(cols ...field.Expr) ISubmissionResultDo
	Join(table schema.Tabler, on ...field.Expr) ISubmissionResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubmissionResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubmissionResultDo
	Group(cols ...field.Expr) ISubmissionResultDo
	Having(conds ...gen.Condition) ISubmissionResultDo
	Limit(limit int) ISubmissionResultDo
	Offset(offset int) ISubmissionResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubmissionResultDo
	Unscoped() ISubmissionResultDo
	Create(values ...*models.SubmissionResult) error
	CreateInBatches(values []*models.SubmissionResult, batchSize int) error
	Save(values ...*models.SubmissionResult) error
	First() (*models.SubmissionResult, error)
	Take() (*models.SubmissionResult, error)
	Last() (*models.SubmissionResult, error)
	Find() ([]*models.SubmissionResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SubmissionResult, err error)
	FindInBatches(result *[]*models.SubmissionResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.SubmissionResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubmissionResultDo
	Assign(attrs ...field.AssignExpr) ISubmissionResultDo
	Joins(fields ...field.RelationField) ISubmissionResultDo
	Preload(fields ...field.RelationField) ISubmissionResultDo
	FirstOrInit() (*models.SubmissionResult, error)
	FirstOrCreate() (*models.SubmissionResult, error)
	FindByPage(offset int, limit int) (result []*models.SubmissionResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubmissionResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s submissionResultDo) Debug() ISubmissionResultDo {
	return s.withDO(s.DO.Debug())
}

func (s submissionResultDo) WithContext(ctx context.Context) ISubmissionResultDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s submissionResultDo) ReadDB() ISubmissionResultDo {
	return s.Clauses(dbresolver.Read)
}

func (s submissionResultDo) WriteDB() ISubmissionResultDo {
	return s.Clauses(dbresolver.Write)
}

func (s submissionResultDo) Session(config *gorm.Session) ISubmissionResultDo {
	return s.withDO(s.DO.Session(config))
}

func (s submissionResultDo) Clauses(conds ...clause.Expression) ISubmissionResultDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s submissionResultDo) Returning(value interface{}, columns ...string) ISubmissionResultDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s submissionResultDo) Not(conds ...gen.Condition) ISubmissionResultDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s submissionResultDo) Or(conds ...gen.Condition) ISubmissionResultDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s submissionResultDo) Select(conds ...field.Expr) ISubmissionResultDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s submissionResultDo) Where(conds ...gen.Condition) ISubmissionResultDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s submissionResultDo) Order(conds ...field.Expr) ISubmissionResultDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s submissionResultDo) Distinct(cols ...field.Expr) ISubmissionResultDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s submissionResultDo) Omit(cols ...field.Expr) ISubmissionResultDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s submissionResultDo) Join(table schema.Tabler, on ...field.Expr) ISubmissionResultDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s submissionResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubmissionResultDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s submissionResultDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubmissionResultDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s submissionResultDo) Group(cols ...field.Expr) ISubmissionResultDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s submissionResultDo) Having(conds ...gen.Condition) ISubmissionResultDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s submissionResultDo) Limit(limit int) ISubmissionResultDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s submissionResultDo) Offset(offset int) ISubmissionResultDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s submissionResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubmissionResultDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s submissionResultDo) Unscoped() ISubmissionResultDo {
	return s.withDO(s.DO.Unscoped())
}

func (s submissionResultDo) Create(values ...*models.SubmissionResult) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s submissionResultDo) CreateInBatches(values []*models.SubmissionResult, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s submissionResultDo) Save(values ...*models.SubmissionResult) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s submissionResultDo) First() (*models.SubmissionResult, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubmissionResult), nil
	}
}

func (s submissionResultDo) Take() (*models.SubmissionResult, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubmissionResult), nil
	}
}

func (s submissionResultDo) Last() (*models.SubmissionResult, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubmissionResult), nil
	}
}

func (s submissionResultDo) Find() ([]*models.SubmissionResult, error) {
	result, err := s.DO.Find()
	return result.([]*models.SubmissionResult), err
}

func (s submissionResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SubmissionResult, err error) {
	buf := make([]*models.SubmissionResult, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s submissionResultDo) FindInBatches(result *[]*models.SubmissionResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s submissionResultDo) Attrs(attrs ...field.AssignExpr) ISubmissionResultDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s submissionResultDo) Assign(attrs ...field.AssignExpr) ISubmissionResultDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s submissionResultDo) Joins(fields ...field.RelationField) ISubmissionResultDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s submissionResultDo) Preload(fields ...field.RelationField) ISubmissionResultDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s submissionResultDo) FirstOrInit() (*models.SubmissionResult, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubmissionResult), nil
	}
}

func (s submissionResultDo) FirstOrCreate() (*models.SubmissionResult, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubmissionResult), nil
	}
}

func (s submissionResultDo) FindByPage(offset int, limit int) (result []*models.SubmissionResult, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s submissionResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s submissionResultDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s submissionResultDo) Delete(models ...*models.SubmissionResult) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *submissionResultDo) withDO(do gen.Dao) *submissionResultDo {
	s.DO = *do.(*gen.DO)
	return s
}
