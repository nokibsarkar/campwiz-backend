// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nokib/campwiz/models"
)

func newRoundStatisticsView(db *gorm.DB, opts ...gen.DOOption) roundStatisticsView {
	_roundStatisticsView := roundStatisticsView{}

	_roundStatisticsView.roundStatisticsViewDo.UseDB(db, opts...)
	_roundStatisticsView.roundStatisticsViewDo.UseModel(&models.RoundStatisticsView{})

	tableName := _roundStatisticsView.roundStatisticsViewDo.TableName()
	_roundStatisticsView.ALL = field.NewAsterisk(tableName)
	_roundStatisticsView.RoundName = field.NewString(tableName, "round_name")
	_roundStatisticsView.RoundID = field.NewString(tableName, "round_id")
	_roundStatisticsView.ParticipantID = field.NewString(tableName, "participant_id")
	_roundStatisticsView.Username = field.NewString(tableName, "username")
	_roundStatisticsView.TotalSubmissions = field.NewInt(tableName, "total_submissions")
	_roundStatisticsView.TotalScore = field.NewFloat64(tableName, "total_score")

	_roundStatisticsView.fillFieldMap()

	return _roundStatisticsView
}

type roundStatisticsView struct {
	roundStatisticsViewDo

	ALL              field.Asterisk
	RoundName        field.String
	RoundID          field.String
	ParticipantID    field.String
	Username         field.String
	TotalSubmissions field.Int
	TotalScore       field.Float64

	fieldMap map[string]field.Expr
}

func (r roundStatisticsView) Table(newTableName string) *roundStatisticsView {
	r.roundStatisticsViewDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roundStatisticsView) As(alias string) *roundStatisticsView {
	r.roundStatisticsViewDo.DO = *(r.roundStatisticsViewDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roundStatisticsView) updateTableName(table string) *roundStatisticsView {
	r.ALL = field.NewAsterisk(table)
	r.RoundName = field.NewString(table, "round_name")
	r.RoundID = field.NewString(table, "round_id")
	r.ParticipantID = field.NewString(table, "participant_id")
	r.Username = field.NewString(table, "username")
	r.TotalSubmissions = field.NewInt(table, "total_submissions")
	r.TotalScore = field.NewFloat64(table, "total_score")

	r.fillFieldMap()

	return r
}

func (r *roundStatisticsView) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roundStatisticsView) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["round_name"] = r.RoundName
	r.fieldMap["round_id"] = r.RoundID
	r.fieldMap["participant_id"] = r.ParticipantID
	r.fieldMap["username"] = r.Username
	r.fieldMap["total_submissions"] = r.TotalSubmissions
	r.fieldMap["total_score"] = r.TotalScore
}

func (r roundStatisticsView) clone(db *gorm.DB) roundStatisticsView {
	r.roundStatisticsViewDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roundStatisticsView) replaceDB(db *gorm.DB) roundStatisticsView {
	r.roundStatisticsViewDo.ReplaceDB(db)
	return r
}

type roundStatisticsViewDo struct{ gen.DO }

type IRoundStatisticsViewDo interface {
	gen.SubQuery
	Debug() IRoundStatisticsViewDo
	WithContext(ctx context.Context) IRoundStatisticsViewDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoundStatisticsViewDo
	WriteDB() IRoundStatisticsViewDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoundStatisticsViewDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoundStatisticsViewDo
	Not(conds ...gen.Condition) IRoundStatisticsViewDo
	Or(conds ...gen.Condition) IRoundStatisticsViewDo
	Select(conds ...field.Expr) IRoundStatisticsViewDo
	Where(conds ...gen.Condition) IRoundStatisticsViewDo
	Order(conds ...field.Expr) IRoundStatisticsViewDo
	Distinct(cols ...field.Expr) IRoundStatisticsViewDo
	Omit(cols ...field.Expr) IRoundStatisticsViewDo
	Join(table schema.Tabler, on ...field.Expr) IRoundStatisticsViewDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoundStatisticsViewDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoundStatisticsViewDo
	Group(cols ...field.Expr) IRoundStatisticsViewDo
	Having(conds ...gen.Condition) IRoundStatisticsViewDo
	Limit(limit int) IRoundStatisticsViewDo
	Offset(offset int) IRoundStatisticsViewDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoundStatisticsViewDo
	Unscoped() IRoundStatisticsViewDo
	Create(values ...*models.RoundStatisticsView) error
	CreateInBatches(values []*models.RoundStatisticsView, batchSize int) error
	Save(values ...*models.RoundStatisticsView) error
	First() (*models.RoundStatisticsView, error)
	Take() (*models.RoundStatisticsView, error)
	Last() (*models.RoundStatisticsView, error)
	Find() ([]*models.RoundStatisticsView, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RoundStatisticsView, err error)
	FindInBatches(result *[]*models.RoundStatisticsView, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.RoundStatisticsView) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoundStatisticsViewDo
	Assign(attrs ...field.AssignExpr) IRoundStatisticsViewDo
	Joins(fields ...field.RelationField) IRoundStatisticsViewDo
	Preload(fields ...field.RelationField) IRoundStatisticsViewDo
	FirstOrInit() (*models.RoundStatisticsView, error)
	FirstOrCreate() (*models.RoundStatisticsView, error)
	FindByPage(offset int, limit int) (result []*models.RoundStatisticsView, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoundStatisticsViewDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FetchByRoundID(round_id string) (result []models.RoundStatistics, err error)
	UpdateByRoundID(round_id string) (err error)
	FetchUserStatisticsByRoundIDs(round_ids []string) (result []models.RoundStatisticsView, err error)
}

// SELECT SUM(`assignment_count`) AS `AssignmentCount`, SUM(`evaluation_count`) AS EvaluationCount, `round_id` AS `round_id` FROM `submissions` WHERE `round_id` = @round_id
func (r roundStatisticsViewDo) FetchByRoundID(round_id string) (result []models.RoundStatistics, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, round_id)
	generateSQL.WriteString("SELECT SUM(`assignment_count`) AS `AssignmentCount`, SUM(`evaluation_count`) AS EvaluationCount, `round_id` AS `round_id` FROM `submissions` WHERE `round_id` = ? ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE rounds,
// (SELECT s.round_id, COUNT(*) AS TotalSubmissions, SUM(s.assignment_count) AS TotalAssignments,
// SUM(s.evaluation_count) AS TotalEvaluatedAssignments, SUM(CASE WHEN s.evaluation_count >= r.quorum THEN 1 ELSE 0 END)
// AS TotalEvaluatedSubmissions, SUM(s.score) AS TotalScore FROM submissions s FORCE INDEX (idx_submissions_round_id)
// JOIN rounds r ON s.round_id = r.round_id WHERE s.round_id = @round_id LIMIT 1) AS s_data
// SET rounds.total_submissions = s_data.TotalSubmissions,
// rounds.total_assignments = s_data.TotalAssignments, rounds.total_evaluated_assignments = s_data.TotalEvaluatedAssignments,
// rounds.total_evaluated_submissions = s_data.TotalEvaluatedSubmissions, rounds.total_score = s_data.TotalScore
// WHERE rounds.round_id = @round_id;
func (r roundStatisticsViewDo) UpdateByRoundID(round_id string) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, round_id)
	params = append(params, round_id)
	generateSQL.WriteString("UPDATE rounds, (SELECT s.round_id, COUNT(*) AS TotalSubmissions, SUM(s.assignment_count) AS TotalAssignments, SUM(s.evaluation_count) AS TotalEvaluatedAssignments, SUM(CASE WHEN s.evaluation_count >= r.quorum THEN 1 ELSE 0 END) AS TotalEvaluatedSubmissions, SUM(s.score) AS TotalScore FROM submissions s FORCE INDEX (idx_submissions_round_id) JOIN rounds r ON s.round_id = r.round_id WHERE s.round_id = ? LIMIT 1) AS s_data SET rounds.total_submissions = s_data.TotalSubmissions, rounds.total_assignments = s_data.TotalAssignments, rounds.total_evaluated_assignments = s_data.TotalEvaluatedAssignments, rounds.total_evaluated_submissions = s_data.TotalEvaluatedSubmissions, rounds.total_score = s_data.TotalScore WHERE rounds.round_id = ?; ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
// users.username AS participant_name,
// rounds.name AS round_name,
// rounds.round_id AS round_id,
// submissions.participant_id AS participant_id,
// COUNT(submissions.submission_id) AS total_submissions,
// SUM(submissions.score) AS total_score
// FROM `submissions` FORCE INDEX (idx_submissions_round_id)
// LEFT JOIN rounds ON submissions.round_id = rounds.round_id
// LEFT JOIN users ON submissions.participant_id = users.user_id
// WHERE submissions.round_id IN (@round_ids)
// GROUP BY `submissions`.`participant_id`
// ORDER BY total_score DESC, total_submissions DESC;
func (r roundStatisticsViewDo) FetchUserStatisticsByRoundIDs(round_ids []string) (result []models.RoundStatisticsView, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, round_ids)
	generateSQL.WriteString("SELECT users.username AS participant_name, rounds.name AS round_name, rounds.round_id AS round_id, submissions.participant_id AS participant_id, COUNT(submissions.submission_id) AS total_submissions, SUM(submissions.score) AS total_score FROM `submissions` FORCE INDEX (idx_submissions_round_id) LEFT JOIN rounds ON submissions.round_id = rounds.round_id LEFT JOIN users ON submissions.participant_id = users.user_id WHERE submissions.round_id IN (?) GROUP BY `submissions`.`participant_id` ORDER BY total_score DESC, total_submissions DESC; ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (r roundStatisticsViewDo) Debug() IRoundStatisticsViewDo {
	return r.withDO(r.DO.Debug())
}

func (r roundStatisticsViewDo) WithContext(ctx context.Context) IRoundStatisticsViewDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roundStatisticsViewDo) ReadDB() IRoundStatisticsViewDo {
	return r.Clauses(dbresolver.Read)
}

func (r roundStatisticsViewDo) WriteDB() IRoundStatisticsViewDo {
	return r.Clauses(dbresolver.Write)
}

func (r roundStatisticsViewDo) Session(config *gorm.Session) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Session(config))
}

func (r roundStatisticsViewDo) Clauses(conds ...clause.Expression) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roundStatisticsViewDo) Returning(value interface{}, columns ...string) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roundStatisticsViewDo) Not(conds ...gen.Condition) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roundStatisticsViewDo) Or(conds ...gen.Condition) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roundStatisticsViewDo) Select(conds ...field.Expr) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roundStatisticsViewDo) Where(conds ...gen.Condition) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roundStatisticsViewDo) Order(conds ...field.Expr) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roundStatisticsViewDo) Distinct(cols ...field.Expr) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roundStatisticsViewDo) Omit(cols ...field.Expr) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roundStatisticsViewDo) Join(table schema.Tabler, on ...field.Expr) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roundStatisticsViewDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoundStatisticsViewDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roundStatisticsViewDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoundStatisticsViewDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roundStatisticsViewDo) Group(cols ...field.Expr) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roundStatisticsViewDo) Having(conds ...gen.Condition) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roundStatisticsViewDo) Limit(limit int) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roundStatisticsViewDo) Offset(offset int) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roundStatisticsViewDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roundStatisticsViewDo) Unscoped() IRoundStatisticsViewDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roundStatisticsViewDo) Create(values ...*models.RoundStatisticsView) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roundStatisticsViewDo) CreateInBatches(values []*models.RoundStatisticsView, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roundStatisticsViewDo) Save(values ...*models.RoundStatisticsView) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roundStatisticsViewDo) First() (*models.RoundStatisticsView, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundStatisticsView), nil
	}
}

func (r roundStatisticsViewDo) Take() (*models.RoundStatisticsView, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundStatisticsView), nil
	}
}

func (r roundStatisticsViewDo) Last() (*models.RoundStatisticsView, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundStatisticsView), nil
	}
}

func (r roundStatisticsViewDo) Find() ([]*models.RoundStatisticsView, error) {
	result, err := r.DO.Find()
	return result.([]*models.RoundStatisticsView), err
}

func (r roundStatisticsViewDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RoundStatisticsView, err error) {
	buf := make([]*models.RoundStatisticsView, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roundStatisticsViewDo) FindInBatches(result *[]*models.RoundStatisticsView, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roundStatisticsViewDo) Attrs(attrs ...field.AssignExpr) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roundStatisticsViewDo) Assign(attrs ...field.AssignExpr) IRoundStatisticsViewDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roundStatisticsViewDo) Joins(fields ...field.RelationField) IRoundStatisticsViewDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roundStatisticsViewDo) Preload(fields ...field.RelationField) IRoundStatisticsViewDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roundStatisticsViewDo) FirstOrInit() (*models.RoundStatisticsView, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundStatisticsView), nil
	}
}

func (r roundStatisticsViewDo) FirstOrCreate() (*models.RoundStatisticsView, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundStatisticsView), nil
	}
}

func (r roundStatisticsViewDo) FindByPage(offset int, limit int) (result []*models.RoundStatisticsView, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roundStatisticsViewDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roundStatisticsViewDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roundStatisticsViewDo) Delete(models ...*models.RoundStatisticsView) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roundStatisticsViewDo) withDO(do gen.Dao) *roundStatisticsViewDo {
	r.DO = *do.(*gen.DO)
	return r
}
