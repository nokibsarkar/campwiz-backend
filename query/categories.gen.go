// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nokib/campwiz/models"
)

func newCategory(db *gorm.DB, opts ...gen.DOOption) category {
	_category := category{}

	_category.categoryDo.UseDB(db, opts...)
	_category.categoryDo.UseModel(&models.Category{})

	tableName := _category.categoryDo.TableName()
	_category.ALL = field.NewAsterisk(tableName)
	_category.CategoryName = field.NewString(tableName, "category_name")
	_category.SubmissionID = field.NewString(tableName, "submission_id")
	_category.AddedByID = field.NewString(tableName, "added_by_id")
	_category.CreatedAt = field.NewTime(tableName, "created_at")
	_category.DeletedAt = field.NewField(tableName, "deleted_at")
	_category.AddedBy = categoryBelongsToAddedBy{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AddedBy", "models.User"),
		LeadingProject: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("AddedBy.LeadingProject", "models.Project"),
		},
	}

	_category.Submission = categoryBelongsToSubmission{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Submission", "models.Submission"),
		Participant: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Submission.Participant", "models.User"),
		},
		Submitter: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Submission.Submitter", "models.User"),
		},
		Campaign: struct {
			field.RelationField
			CreatedBy struct {
				field.RelationField
			}
			Project struct {
				field.RelationField
			}
			LatestRound struct {
				field.RelationField
				Campaign struct {
					field.RelationField
				}
				Creator struct {
					field.RelationField
				}
				DependsOnRound struct {
					field.RelationField
				}
				Roles struct {
					field.RelationField
					Round struct {
						field.RelationField
					}
					Campaign struct {
						field.RelationField
					}
					User struct {
						field.RelationField
					}
					Project struct {
						field.RelationField
					}
				}
			}
			Roles struct {
				field.RelationField
			}
			Rounds struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Submission.Campaign", "models.Campaign"),
			CreatedBy: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Submission.Campaign.CreatedBy", "models.User"),
			},
			Project: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Submission.Campaign.Project", "models.Project"),
			},
			LatestRound: struct {
				field.RelationField
				Campaign struct {
					field.RelationField
				}
				Creator struct {
					field.RelationField
				}
				DependsOnRound struct {
					field.RelationField
				}
				Roles struct {
					field.RelationField
					Round struct {
						field.RelationField
					}
					Campaign struct {
						field.RelationField
					}
					User struct {
						field.RelationField
					}
					Project struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Submission.Campaign.LatestRound", "models.Round"),
				Campaign: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Submission.Campaign.LatestRound.Campaign", "models.Campaign"),
				},
				Creator: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Submission.Campaign.LatestRound.Creator", "models.User"),
				},
				DependsOnRound: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Submission.Campaign.LatestRound.DependsOnRound", "models.Round"),
				},
				Roles: struct {
					field.RelationField
					Round struct {
						field.RelationField
					}
					Campaign struct {
						field.RelationField
					}
					User struct {
						field.RelationField
					}
					Project struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Submission.Campaign.LatestRound.Roles", "models.Role"),
					Round: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Submission.Campaign.LatestRound.Roles.Round", "models.Round"),
					},
					Campaign: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Submission.Campaign.LatestRound.Roles.Campaign", "models.Campaign"),
					},
					User: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Submission.Campaign.LatestRound.Roles.User", "models.User"),
					},
					Project: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Submission.Campaign.LatestRound.Roles.Project", "models.Project"),
					},
				},
			},
			Roles: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Submission.Campaign.Roles", "models.Role"),
			},
			Rounds: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Submission.Campaign.Rounds", "models.Round"),
			},
		},
		Round: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Submission.Round", "models.Round"),
		},
		DistributionTask: struct {
			field.RelationField
			Submittor struct {
				field.RelationField
			}
			TaskData struct {
				field.RelationField
				Task struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Submission.DistributionTask", "models.Task"),
			Submittor: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Submission.DistributionTask.Submittor", "models.User"),
			},
			TaskData: struct {
				field.RelationField
				Task struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Submission.DistributionTask.TaskData", "models.TaskData"),
				Task: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Submission.DistributionTask.TaskData.Task", "models.Task"),
				},
			},
		},
		ImportTask: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Submission.ImportTask", "models.Task"),
		},
	}

	_category.fillFieldMap()

	return _category
}

type category struct {
	categoryDo

	ALL          field.Asterisk
	CategoryName field.String
	SubmissionID field.String
	AddedByID    field.String
	CreatedAt    field.Time
	DeletedAt    field.Field
	AddedBy      categoryBelongsToAddedBy

	Submission categoryBelongsToSubmission

	fieldMap map[string]field.Expr
}

func (c category) Table(newTableName string) *category {
	c.categoryDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c category) As(alias string) *category {
	c.categoryDo.DO = *(c.categoryDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *category) updateTableName(table string) *category {
	c.ALL = field.NewAsterisk(table)
	c.CategoryName = field.NewString(table, "category_name")
	c.SubmissionID = field.NewString(table, "submission_id")
	c.AddedByID = field.NewString(table, "added_by_id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *category) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *category) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["category_name"] = c.CategoryName
	c.fieldMap["submission_id"] = c.SubmissionID
	c.fieldMap["added_by_id"] = c.AddedByID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt

}

func (c category) clone(db *gorm.DB) category {
	c.categoryDo.ReplaceConnPool(db.Statement.ConnPool)
	c.AddedBy.db = db.Session(&gorm.Session{Initialized: true})
	c.AddedBy.db.Statement.ConnPool = db.Statement.ConnPool
	c.Submission.db = db.Session(&gorm.Session{Initialized: true})
	c.Submission.db.Statement.ConnPool = db.Statement.ConnPool
	return c
}

func (c category) replaceDB(db *gorm.DB) category {
	c.categoryDo.ReplaceDB(db)
	c.AddedBy.db = db.Session(&gorm.Session{})
	c.Submission.db = db.Session(&gorm.Session{})
	return c
}

type categoryBelongsToAddedBy struct {
	db *gorm.DB

	field.RelationField

	LeadingProject struct {
		field.RelationField
	}
}

func (a categoryBelongsToAddedBy) Where(conds ...field.Expr) *categoryBelongsToAddedBy {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a categoryBelongsToAddedBy) WithContext(ctx context.Context) *categoryBelongsToAddedBy {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a categoryBelongsToAddedBy) Session(session *gorm.Session) *categoryBelongsToAddedBy {
	a.db = a.db.Session(session)
	return &a
}

func (a categoryBelongsToAddedBy) Model(m *models.Category) *categoryBelongsToAddedByTx {
	return &categoryBelongsToAddedByTx{a.db.Model(m).Association(a.Name())}
}

func (a categoryBelongsToAddedBy) Unscoped() *categoryBelongsToAddedBy {
	a.db = a.db.Unscoped()
	return &a
}

type categoryBelongsToAddedByTx struct{ tx *gorm.Association }

func (a categoryBelongsToAddedByTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a categoryBelongsToAddedByTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a categoryBelongsToAddedByTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a categoryBelongsToAddedByTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a categoryBelongsToAddedByTx) Clear() error {
	return a.tx.Clear()
}

func (a categoryBelongsToAddedByTx) Count() int64 {
	return a.tx.Count()
}

func (a categoryBelongsToAddedByTx) Unscoped() *categoryBelongsToAddedByTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type categoryBelongsToSubmission struct {
	db *gorm.DB

	field.RelationField

	Participant struct {
		field.RelationField
	}
	Submitter struct {
		field.RelationField
	}
	Campaign struct {
		field.RelationField
		CreatedBy struct {
			field.RelationField
		}
		Project struct {
			field.RelationField
		}
		LatestRound struct {
			field.RelationField
			Campaign struct {
				field.RelationField
			}
			Creator struct {
				field.RelationField
			}
			DependsOnRound struct {
				field.RelationField
			}
			Roles struct {
				field.RelationField
				Round struct {
					field.RelationField
				}
				Campaign struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
				Project struct {
					field.RelationField
				}
			}
		}
		Roles struct {
			field.RelationField
		}
		Rounds struct {
			field.RelationField
		}
	}
	Round struct {
		field.RelationField
	}
	DistributionTask struct {
		field.RelationField
		Submittor struct {
			field.RelationField
		}
		TaskData struct {
			field.RelationField
			Task struct {
				field.RelationField
			}
		}
	}
	ImportTask struct {
		field.RelationField
	}
}

func (a categoryBelongsToSubmission) Where(conds ...field.Expr) *categoryBelongsToSubmission {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a categoryBelongsToSubmission) WithContext(ctx context.Context) *categoryBelongsToSubmission {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a categoryBelongsToSubmission) Session(session *gorm.Session) *categoryBelongsToSubmission {
	a.db = a.db.Session(session)
	return &a
}

func (a categoryBelongsToSubmission) Model(m *models.Category) *categoryBelongsToSubmissionTx {
	return &categoryBelongsToSubmissionTx{a.db.Model(m).Association(a.Name())}
}

func (a categoryBelongsToSubmission) Unscoped() *categoryBelongsToSubmission {
	a.db = a.db.Unscoped()
	return &a
}

type categoryBelongsToSubmissionTx struct{ tx *gorm.Association }

func (a categoryBelongsToSubmissionTx) Find() (result *models.Submission, err error) {
	return result, a.tx.Find(&result)
}

func (a categoryBelongsToSubmissionTx) Append(values ...*models.Submission) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a categoryBelongsToSubmissionTx) Replace(values ...*models.Submission) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a categoryBelongsToSubmissionTx) Delete(values ...*models.Submission) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a categoryBelongsToSubmissionTx) Clear() error {
	return a.tx.Clear()
}

func (a categoryBelongsToSubmissionTx) Count() int64 {
	return a.tx.Count()
}

func (a categoryBelongsToSubmissionTx) Unscoped() *categoryBelongsToSubmissionTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type categoryDo struct{ gen.DO }

type ICategoryDo interface {
	gen.SubQuery
	Debug() ICategoryDo
	WithContext(ctx context.Context) ICategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICategoryDo
	WriteDB() ICategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICategoryDo
	Not(conds ...gen.Condition) ICategoryDo
	Or(conds ...gen.Condition) ICategoryDo
	Select(conds ...field.Expr) ICategoryDo
	Where(conds ...gen.Condition) ICategoryDo
	Order(conds ...field.Expr) ICategoryDo
	Distinct(cols ...field.Expr) ICategoryDo
	Omit(cols ...field.Expr) ICategoryDo
	Join(table schema.Tabler, on ...field.Expr) ICategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICategoryDo
	Group(cols ...field.Expr) ICategoryDo
	Having(conds ...gen.Condition) ICategoryDo
	Limit(limit int) ICategoryDo
	Offset(offset int) ICategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICategoryDo
	Unscoped() ICategoryDo
	Create(values ...*models.Category) error
	CreateInBatches(values []*models.Category, batchSize int) error
	Save(values ...*models.Category) error
	First() (*models.Category, error)
	Take() (*models.Category, error)
	Last() (*models.Category, error)
	Find() ([]*models.Category, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Category, err error)
	FindInBatches(result *[]*models.Category, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Category) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICategoryDo
	Assign(attrs ...field.AssignExpr) ICategoryDo
	Joins(fields ...field.RelationField) ICategoryDo
	Preload(fields ...field.RelationField) ICategoryDo
	FirstOrInit() (*models.Category, error)
	FirstOrCreate() (*models.Category, error)
	FindByPage(offset int, limit int) (result []*models.Category, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c categoryDo) Debug() ICategoryDo {
	return c.withDO(c.DO.Debug())
}

func (c categoryDo) WithContext(ctx context.Context) ICategoryDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c categoryDo) ReadDB() ICategoryDo {
	return c.Clauses(dbresolver.Read)
}

func (c categoryDo) WriteDB() ICategoryDo {
	return c.Clauses(dbresolver.Write)
}

func (c categoryDo) Session(config *gorm.Session) ICategoryDo {
	return c.withDO(c.DO.Session(config))
}

func (c categoryDo) Clauses(conds ...clause.Expression) ICategoryDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c categoryDo) Returning(value interface{}, columns ...string) ICategoryDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c categoryDo) Not(conds ...gen.Condition) ICategoryDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c categoryDo) Or(conds ...gen.Condition) ICategoryDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c categoryDo) Select(conds ...field.Expr) ICategoryDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c categoryDo) Where(conds ...gen.Condition) ICategoryDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c categoryDo) Order(conds ...field.Expr) ICategoryDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c categoryDo) Distinct(cols ...field.Expr) ICategoryDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c categoryDo) Omit(cols ...field.Expr) ICategoryDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c categoryDo) Join(table schema.Tabler, on ...field.Expr) ICategoryDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c categoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICategoryDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c categoryDo) RightJoin(table schema.Tabler, on ...field.Expr) ICategoryDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c categoryDo) Group(cols ...field.Expr) ICategoryDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c categoryDo) Having(conds ...gen.Condition) ICategoryDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c categoryDo) Limit(limit int) ICategoryDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c categoryDo) Offset(offset int) ICategoryDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c categoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICategoryDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c categoryDo) Unscoped() ICategoryDo {
	return c.withDO(c.DO.Unscoped())
}

func (c categoryDo) Create(values ...*models.Category) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c categoryDo) CreateInBatches(values []*models.Category, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c categoryDo) Save(values ...*models.Category) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c categoryDo) First() (*models.Category, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Category), nil
	}
}

func (c categoryDo) Take() (*models.Category, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Category), nil
	}
}

func (c categoryDo) Last() (*models.Category, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Category), nil
	}
}

func (c categoryDo) Find() ([]*models.Category, error) {
	result, err := c.DO.Find()
	return result.([]*models.Category), err
}

func (c categoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Category, err error) {
	buf := make([]*models.Category, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c categoryDo) FindInBatches(result *[]*models.Category, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c categoryDo) Attrs(attrs ...field.AssignExpr) ICategoryDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c categoryDo) Assign(attrs ...field.AssignExpr) ICategoryDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c categoryDo) Joins(fields ...field.RelationField) ICategoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c categoryDo) Preload(fields ...field.RelationField) ICategoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c categoryDo) FirstOrInit() (*models.Category, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Category), nil
	}
}

func (c categoryDo) FirstOrCreate() (*models.Category, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Category), nil
	}
}

func (c categoryDo) FindByPage(offset int, limit int) (result []*models.Category, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c categoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c categoryDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c categoryDo) Delete(models ...*models.Category) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *categoryDo) withDO(do gen.Dao) *categoryDo {
	c.DO = *do.(*gen.DO)
	return c
}
