// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nokib/campwiz/models"
)

func newCampaign(db *gorm.DB, opts ...gen.DOOption) campaign {
	_campaign := campaign{}

	_campaign.campaignDo.UseDB(db, opts...)
	_campaign.campaignDo.UseModel(&models.Campaign{})

	tableName := _campaign.campaignDo.TableName()
	_campaign.ALL = field.NewAsterisk(tableName)
	_campaign.CampaignID = field.NewString(tableName, "campaign_id")
	_campaign.CreatedAt = field.NewTime(tableName, "created_at")
	_campaign.CreatedByID = field.NewString(tableName, "created_by_id")
	_campaign.Name = field.NewString(tableName, "name")
	_campaign.Description = field.NewString(tableName, "description")
	_campaign.StartDate = field.NewTime(tableName, "start_date")
	_campaign.EndDate = field.NewTime(tableName, "end_date")
	_campaign.Language = field.NewString(tableName, "language")
	_campaign.Rules = field.NewString(tableName, "rules")
	_campaign.Image = field.NewString(tableName, "image")
	_campaign.IsPublic = field.NewBool(tableName, "is_public")
	_campaign.ProjectID = field.NewString(tableName, "project_id")
	_campaign.Status = field.NewString(tableName, "status")
	_campaign.Roles = campaignHasManyRoles{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Roles", "models.Role"),
		Campaign: struct {
			field.RelationField
			CreatedBy struct {
				field.RelationField
				LeadingProject struct {
					field.RelationField
				}
			}
			Project struct {
				field.RelationField
			}
			Roles struct {
				field.RelationField
			}
			Rounds struct {
				field.RelationField
				Campaign struct {
					field.RelationField
				}
				Creator struct {
					field.RelationField
				}
				DependsOnRound struct {
					field.RelationField
				}
				Roles struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Roles.Campaign", "models.Campaign"),
			CreatedBy: struct {
				field.RelationField
				LeadingProject struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Roles.Campaign.CreatedBy", "models.User"),
				LeadingProject: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Roles.Campaign.CreatedBy.LeadingProject", "models.Project"),
				},
			},
			Project: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Roles.Campaign.Project", "models.Project"),
			},
			Roles: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Roles.Campaign.Roles", "models.Role"),
			},
			Rounds: struct {
				field.RelationField
				Campaign struct {
					field.RelationField
				}
				Creator struct {
					field.RelationField
				}
				DependsOnRound struct {
					field.RelationField
				}
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Roles.Campaign.Rounds", "models.Round"),
				Campaign: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Roles.Campaign.Rounds.Campaign", "models.Campaign"),
				},
				Creator: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Roles.Campaign.Rounds.Creator", "models.User"),
				},
				DependsOnRound: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Roles.Campaign.Rounds.DependsOnRound", "models.Round"),
				},
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Roles.Campaign.Rounds.Roles", "models.Role"),
				},
			},
		},
		User: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Roles.User", "models.User"),
		},
		Round: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Roles.Round", "models.Round"),
		},
		Project: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Roles.Project", "models.Project"),
		},
	}

	_campaign.Rounds = campaignHasManyRounds{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Rounds", "models.Round"),
	}

	_campaign.CreatedBy = campaignBelongsToCreatedBy{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CreatedBy", "models.User"),
	}

	_campaign.Project = campaignBelongsToProject{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Project", "models.Project"),
	}

	_campaign.fillFieldMap()

	return _campaign
}

type campaign struct {
	campaignDo

	ALL         field.Asterisk
	CampaignID  field.String
	CreatedAt   field.Time
	CreatedByID field.String
	Name        field.String
	Description field.String
	StartDate   field.Time
	EndDate     field.Time
	Language    field.String
	Rules       field.String
	Image       field.String
	IsPublic    field.Bool
	ProjectID   field.String
	Status      field.String
	Roles       campaignHasManyRoles

	Rounds campaignHasManyRounds

	CreatedBy campaignBelongsToCreatedBy

	Project campaignBelongsToProject

	fieldMap map[string]field.Expr
}

func (c campaign) Table(newTableName string) *campaign {
	c.campaignDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c campaign) As(alias string) *campaign {
	c.campaignDo.DO = *(c.campaignDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *campaign) updateTableName(table string) *campaign {
	c.ALL = field.NewAsterisk(table)
	c.CampaignID = field.NewString(table, "campaign_id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.CreatedByID = field.NewString(table, "created_by_id")
	c.Name = field.NewString(table, "name")
	c.Description = field.NewString(table, "description")
	c.StartDate = field.NewTime(table, "start_date")
	c.EndDate = field.NewTime(table, "end_date")
	c.Language = field.NewString(table, "language")
	c.Rules = field.NewString(table, "rules")
	c.Image = field.NewString(table, "image")
	c.IsPublic = field.NewBool(table, "is_public")
	c.ProjectID = field.NewString(table, "project_id")
	c.Status = field.NewString(table, "status")

	c.fillFieldMap()

	return c
}

func (c *campaign) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *campaign) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 17)
	c.fieldMap["campaign_id"] = c.CampaignID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["created_by_id"] = c.CreatedByID
	c.fieldMap["name"] = c.Name
	c.fieldMap["description"] = c.Description
	c.fieldMap["start_date"] = c.StartDate
	c.fieldMap["end_date"] = c.EndDate
	c.fieldMap["language"] = c.Language
	c.fieldMap["rules"] = c.Rules
	c.fieldMap["image"] = c.Image
	c.fieldMap["is_public"] = c.IsPublic
	c.fieldMap["project_id"] = c.ProjectID
	c.fieldMap["status"] = c.Status

}

func (c campaign) clone(db *gorm.DB) campaign {
	c.campaignDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c campaign) replaceDB(db *gorm.DB) campaign {
	c.campaignDo.ReplaceDB(db)
	return c
}

type campaignHasManyRoles struct {
	db *gorm.DB

	field.RelationField

	Campaign struct {
		field.RelationField
		CreatedBy struct {
			field.RelationField
			LeadingProject struct {
				field.RelationField
			}
		}
		Project struct {
			field.RelationField
		}
		Roles struct {
			field.RelationField
		}
		Rounds struct {
			field.RelationField
			Campaign struct {
				field.RelationField
			}
			Creator struct {
				field.RelationField
			}
			DependsOnRound struct {
				field.RelationField
			}
			Roles struct {
				field.RelationField
			}
		}
	}
	User struct {
		field.RelationField
	}
	Round struct {
		field.RelationField
	}
	Project struct {
		field.RelationField
	}
}

func (a campaignHasManyRoles) Where(conds ...field.Expr) *campaignHasManyRoles {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a campaignHasManyRoles) WithContext(ctx context.Context) *campaignHasManyRoles {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a campaignHasManyRoles) Session(session *gorm.Session) *campaignHasManyRoles {
	a.db = a.db.Session(session)
	return &a
}

func (a campaignHasManyRoles) Model(m *models.Campaign) *campaignHasManyRolesTx {
	return &campaignHasManyRolesTx{a.db.Model(m).Association(a.Name())}
}

type campaignHasManyRolesTx struct{ tx *gorm.Association }

func (a campaignHasManyRolesTx) Find() (result []*models.Role, err error) {
	return result, a.tx.Find(&result)
}

func (a campaignHasManyRolesTx) Append(values ...*models.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a campaignHasManyRolesTx) Replace(values ...*models.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a campaignHasManyRolesTx) Delete(values ...*models.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a campaignHasManyRolesTx) Clear() error {
	return a.tx.Clear()
}

func (a campaignHasManyRolesTx) Count() int64 {
	return a.tx.Count()
}

type campaignHasManyRounds struct {
	db *gorm.DB

	field.RelationField
}

func (a campaignHasManyRounds) Where(conds ...field.Expr) *campaignHasManyRounds {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a campaignHasManyRounds) WithContext(ctx context.Context) *campaignHasManyRounds {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a campaignHasManyRounds) Session(session *gorm.Session) *campaignHasManyRounds {
	a.db = a.db.Session(session)
	return &a
}

func (a campaignHasManyRounds) Model(m *models.Campaign) *campaignHasManyRoundsTx {
	return &campaignHasManyRoundsTx{a.db.Model(m).Association(a.Name())}
}

type campaignHasManyRoundsTx struct{ tx *gorm.Association }

func (a campaignHasManyRoundsTx) Find() (result []*models.Round, err error) {
	return result, a.tx.Find(&result)
}

func (a campaignHasManyRoundsTx) Append(values ...*models.Round) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a campaignHasManyRoundsTx) Replace(values ...*models.Round) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a campaignHasManyRoundsTx) Delete(values ...*models.Round) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a campaignHasManyRoundsTx) Clear() error {
	return a.tx.Clear()
}

func (a campaignHasManyRoundsTx) Count() int64 {
	return a.tx.Count()
}

type campaignBelongsToCreatedBy struct {
	db *gorm.DB

	field.RelationField
}

func (a campaignBelongsToCreatedBy) Where(conds ...field.Expr) *campaignBelongsToCreatedBy {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a campaignBelongsToCreatedBy) WithContext(ctx context.Context) *campaignBelongsToCreatedBy {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a campaignBelongsToCreatedBy) Session(session *gorm.Session) *campaignBelongsToCreatedBy {
	a.db = a.db.Session(session)
	return &a
}

func (a campaignBelongsToCreatedBy) Model(m *models.Campaign) *campaignBelongsToCreatedByTx {
	return &campaignBelongsToCreatedByTx{a.db.Model(m).Association(a.Name())}
}

type campaignBelongsToCreatedByTx struct{ tx *gorm.Association }

func (a campaignBelongsToCreatedByTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a campaignBelongsToCreatedByTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a campaignBelongsToCreatedByTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a campaignBelongsToCreatedByTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a campaignBelongsToCreatedByTx) Clear() error {
	return a.tx.Clear()
}

func (a campaignBelongsToCreatedByTx) Count() int64 {
	return a.tx.Count()
}

type campaignBelongsToProject struct {
	db *gorm.DB

	field.RelationField
}

func (a campaignBelongsToProject) Where(conds ...field.Expr) *campaignBelongsToProject {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a campaignBelongsToProject) WithContext(ctx context.Context) *campaignBelongsToProject {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a campaignBelongsToProject) Session(session *gorm.Session) *campaignBelongsToProject {
	a.db = a.db.Session(session)
	return &a
}

func (a campaignBelongsToProject) Model(m *models.Campaign) *campaignBelongsToProjectTx {
	return &campaignBelongsToProjectTx{a.db.Model(m).Association(a.Name())}
}

type campaignBelongsToProjectTx struct{ tx *gorm.Association }

func (a campaignBelongsToProjectTx) Find() (result *models.Project, err error) {
	return result, a.tx.Find(&result)
}

func (a campaignBelongsToProjectTx) Append(values ...*models.Project) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a campaignBelongsToProjectTx) Replace(values ...*models.Project) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a campaignBelongsToProjectTx) Delete(values ...*models.Project) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a campaignBelongsToProjectTx) Clear() error {
	return a.tx.Clear()
}

func (a campaignBelongsToProjectTx) Count() int64 {
	return a.tx.Count()
}

type campaignDo struct{ gen.DO }

type ICampaignDo interface {
	gen.SubQuery
	Debug() ICampaignDo
	WithContext(ctx context.Context) ICampaignDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICampaignDo
	WriteDB() ICampaignDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICampaignDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICampaignDo
	Not(conds ...gen.Condition) ICampaignDo
	Or(conds ...gen.Condition) ICampaignDo
	Select(conds ...field.Expr) ICampaignDo
	Where(conds ...gen.Condition) ICampaignDo
	Order(conds ...field.Expr) ICampaignDo
	Distinct(cols ...field.Expr) ICampaignDo
	Omit(cols ...field.Expr) ICampaignDo
	Join(table schema.Tabler, on ...field.Expr) ICampaignDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICampaignDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICampaignDo
	Group(cols ...field.Expr) ICampaignDo
	Having(conds ...gen.Condition) ICampaignDo
	Limit(limit int) ICampaignDo
	Offset(offset int) ICampaignDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICampaignDo
	Unscoped() ICampaignDo
	Create(values ...*models.Campaign) error
	CreateInBatches(values []*models.Campaign, batchSize int) error
	Save(values ...*models.Campaign) error
	First() (*models.Campaign, error)
	Take() (*models.Campaign, error)
	Last() (*models.Campaign, error)
	Find() ([]*models.Campaign, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Campaign, err error)
	FindInBatches(result *[]*models.Campaign, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Campaign) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICampaignDo
	Assign(attrs ...field.AssignExpr) ICampaignDo
	Joins(fields ...field.RelationField) ICampaignDo
	Preload(fields ...field.RelationField) ICampaignDo
	FirstOrInit() (*models.Campaign, error)
	FirstOrCreate() (*models.Campaign, error)
	FindByPage(offset int, limit int) (result []*models.Campaign, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICampaignDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c campaignDo) Debug() ICampaignDo {
	return c.withDO(c.DO.Debug())
}

func (c campaignDo) WithContext(ctx context.Context) ICampaignDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c campaignDo) ReadDB() ICampaignDo {
	return c.Clauses(dbresolver.Read)
}

func (c campaignDo) WriteDB() ICampaignDo {
	return c.Clauses(dbresolver.Write)
}

func (c campaignDo) Session(config *gorm.Session) ICampaignDo {
	return c.withDO(c.DO.Session(config))
}

func (c campaignDo) Clauses(conds ...clause.Expression) ICampaignDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c campaignDo) Returning(value interface{}, columns ...string) ICampaignDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c campaignDo) Not(conds ...gen.Condition) ICampaignDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c campaignDo) Or(conds ...gen.Condition) ICampaignDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c campaignDo) Select(conds ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c campaignDo) Where(conds ...gen.Condition) ICampaignDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c campaignDo) Order(conds ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c campaignDo) Distinct(cols ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c campaignDo) Omit(cols ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c campaignDo) Join(table schema.Tabler, on ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c campaignDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c campaignDo) RightJoin(table schema.Tabler, on ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c campaignDo) Group(cols ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c campaignDo) Having(conds ...gen.Condition) ICampaignDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c campaignDo) Limit(limit int) ICampaignDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c campaignDo) Offset(offset int) ICampaignDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c campaignDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICampaignDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c campaignDo) Unscoped() ICampaignDo {
	return c.withDO(c.DO.Unscoped())
}

func (c campaignDo) Create(values ...*models.Campaign) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c campaignDo) CreateInBatches(values []*models.Campaign, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c campaignDo) Save(values ...*models.Campaign) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c campaignDo) First() (*models.Campaign, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Campaign), nil
	}
}

func (c campaignDo) Take() (*models.Campaign, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Campaign), nil
	}
}

func (c campaignDo) Last() (*models.Campaign, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Campaign), nil
	}
}

func (c campaignDo) Find() ([]*models.Campaign, error) {
	result, err := c.DO.Find()
	return result.([]*models.Campaign), err
}

func (c campaignDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Campaign, err error) {
	buf := make([]*models.Campaign, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c campaignDo) FindInBatches(result *[]*models.Campaign, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c campaignDo) Attrs(attrs ...field.AssignExpr) ICampaignDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c campaignDo) Assign(attrs ...field.AssignExpr) ICampaignDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c campaignDo) Joins(fields ...field.RelationField) ICampaignDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c campaignDo) Preload(fields ...field.RelationField) ICampaignDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c campaignDo) FirstOrInit() (*models.Campaign, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Campaign), nil
	}
}

func (c campaignDo) FirstOrCreate() (*models.Campaign, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Campaign), nil
	}
}

func (c campaignDo) FindByPage(offset int, limit int) (result []*models.Campaign, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c campaignDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c campaignDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c campaignDo) Delete(models ...*models.Campaign) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *campaignDo) withDO(do gen.Dao) *campaignDo {
	c.DO = *do.(*gen.DO)
	return c
}
