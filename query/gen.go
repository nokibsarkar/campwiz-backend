// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                    = new(Query)
	Campaign             *campaign
	Evaluation           *evaluation
	JuryStatistics       *juryStatistics
	Project              *project
	Role                 *role
	Round                *round
	Submission           *submission
	SubmissionResult     *submissionResult
	SubmissionStatistics *submissionStatistics
	Task                 *task
	User                 *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Campaign = &Q.Campaign
	Evaluation = &Q.Evaluation
	JuryStatistics = &Q.JuryStatistics
	Project = &Q.Project
	Role = &Q.Role
	Round = &Q.Round
	Submission = &Q.Submission
	SubmissionResult = &Q.SubmissionResult
	SubmissionStatistics = &Q.SubmissionStatistics
	Task = &Q.Task
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                   db,
		Campaign:             newCampaign(db, opts...),
		Evaluation:           newEvaluation(db, opts...),
		JuryStatistics:       newJuryStatistics(db, opts...),
		Project:              newProject(db, opts...),
		Role:                 newRole(db, opts...),
		Round:                newRound(db, opts...),
		Submission:           newSubmission(db, opts...),
		SubmissionResult:     newSubmissionResult(db, opts...),
		SubmissionStatistics: newSubmissionStatistics(db, opts...),
		Task:                 newTask(db, opts...),
		User:                 newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Campaign             campaign
	Evaluation           evaluation
	JuryStatistics       juryStatistics
	Project              project
	Role                 role
	Round                round
	Submission           submission
	SubmissionResult     submissionResult
	SubmissionStatistics submissionStatistics
	Task                 task
	User                 user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Campaign:             q.Campaign.clone(db),
		Evaluation:           q.Evaluation.clone(db),
		JuryStatistics:       q.JuryStatistics.clone(db),
		Project:              q.Project.clone(db),
		Role:                 q.Role.clone(db),
		Round:                q.Round.clone(db),
		Submission:           q.Submission.clone(db),
		SubmissionResult:     q.SubmissionResult.clone(db),
		SubmissionStatistics: q.SubmissionStatistics.clone(db),
		Task:                 q.Task.clone(db),
		User:                 q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Campaign:             q.Campaign.replaceDB(db),
		Evaluation:           q.Evaluation.replaceDB(db),
		JuryStatistics:       q.JuryStatistics.replaceDB(db),
		Project:              q.Project.replaceDB(db),
		Role:                 q.Role.replaceDB(db),
		Round:                q.Round.replaceDB(db),
		Submission:           q.Submission.replaceDB(db),
		SubmissionResult:     q.SubmissionResult.replaceDB(db),
		SubmissionStatistics: q.SubmissionStatistics.replaceDB(db),
		Task:                 q.Task.replaceDB(db),
		User:                 q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Campaign             ICampaignDo
	Evaluation           IEvaluationDo
	JuryStatistics       IJuryStatisticsDo
	Project              IProjectDo
	Role                 IRoleDo
	Round                IRoundDo
	Submission           ISubmissionDo
	SubmissionResult     ISubmissionResultDo
	SubmissionStatistics ISubmissionStatisticsDo
	Task                 ITaskDo
	User                 IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Campaign:             q.Campaign.WithContext(ctx),
		Evaluation:           q.Evaluation.WithContext(ctx),
		JuryStatistics:       q.JuryStatistics.WithContext(ctx),
		Project:              q.Project.WithContext(ctx),
		Role:                 q.Role.WithContext(ctx),
		Round:                q.Round.WithContext(ctx),
		Submission:           q.Submission.WithContext(ctx),
		SubmissionResult:     q.SubmissionResult.WithContext(ctx),
		SubmissionStatistics: q.SubmissionStatistics.WithContext(ctx),
		Task:                 q.Task.WithContext(ctx),
		User:                 q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
