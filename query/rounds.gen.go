// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nokib/campwiz/models"
)

func newRound(db *gorm.DB, opts ...gen.DOOption) round {
	_round := round{}

	_round.roundDo.UseDB(db, opts...)
	_round.roundDo.UseModel(&models.Round{})

	tableName := _round.roundDo.TableName()
	_round.ALL = field.NewAsterisk(tableName)
	_round.RoundID = field.NewString(tableName, "round_id")
	_round.CampaignID = field.NewString(tableName, "campaign_id")
	_round.ProjectID = field.NewString(tableName, "project_id")
	_round.CreatedAt = field.NewTime(tableName, "created_at")
	_round.CreatedByID = field.NewString(tableName, "created_by_id")
	_round.TotalSubmissions = field.NewInt(tableName, "total_submissions")
	_round.TotalAssignments = field.NewInt(tableName, "total_assignments")
	_round.TotalEvaluatedAssignments = field.NewInt(tableName, "total_evaluated_assignments")
	_round.TotalEvaluatedSubmissions = field.NewInt(tableName, "total_evaluated_submissions")
	_round.Status = field.NewString(tableName, "status")
	_round.LatestDistributionTaskID = field.NewString(tableName, "latest_distribution_task_id")
	_round.Name = field.NewString(tableName, "name")
	_round.Description = field.NewString(tableName, "description")
	_round.StartDate = field.NewTime(tableName, "start_date")
	_round.EndDate = field.NewTime(tableName, "end_date")
	_round.IsOpen = field.NewBool(tableName, "is_open")
	_round.IsPublicJury = field.NewBool(tableName, "is_public_jury")
	_round.DependsOnRoundID = field.NewString(tableName, "depends_on_round_id")
	_round.Serial = field.NewInt(tableName, "serial")
	_round.Quorum = field.NewUint(tableName, "quorum")
	_round.Type = field.NewString(tableName, "type")
	_round.AllowJuryToParticipate = field.NewBool(tableName, "allow_jury_to_participate")
	_round.AllowMultipleJudgement = field.NewBool(tableName, "allow_multiple_judgement")
	_round.SecretBallot = field.NewBool(tableName, "secret_ballot")
	_round.Blacklist = field.NewString(tableName, "blacklist")
	_round.ImageMinimumResolution = field.NewInt(tableName, "image_minimum_resolution")
	_round.ImageMinimumSizeBytes = field.NewInt(tableName, "image_minimum_size_bytes")
	_round.AudioMinimumDurationMilliseconds = field.NewInt(tableName, "audio_minimum_duration_milliseconds")
	_round.AudioMinimumSizeBytes = field.NewInt(tableName, "audio_minimum_size_bytes")
	_round.VideoMinimumDurationMilliseconds = field.NewInt(tableName, "video_minimum_duration_milliseconds")
	_round.VideoMinimumSizeBytes = field.NewInt(tableName, "video_minimum_size_bytes")
	_round.VideoMinimumResolution = field.NewInt(tableName, "video_minimum_resolution")
	_round.MaximumSubmissionOfSameArticle = field.NewInt(tableName, "maximum_submission_of_same_article")
	_round.ArticleAllowExpansions = field.NewBool(tableName, "article_allow_expansions")
	_round.ArticleAllowCreations = field.NewBool(tableName, "article_allow_creations")
	_round.ArticleMinimumTotalBytes = field.NewInt(tableName, "article_minimum_total_bytes")
	_round.ArticleMinimumTotalWords = field.NewInt(tableName, "article_minimum_total_words")
	_round.ArticleMinimumAddedBytes = field.NewInt(tableName, "article_minimum_added_bytes")
	_round.ArticleMinimumAddedWords = field.NewInt(tableName, "article_minimum_added_words")
	_round.AllowedMediaTypes = field.NewField(tableName, "allowed_media_types")
	_round.Roles = roundHasManyRoles{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Roles", "models.Role"),
		Campaign: struct {
			field.RelationField
			CreatedBy struct {
				field.RelationField
				LeadingProject struct {
					field.RelationField
				}
			}
			Project struct {
				field.RelationField
			}
			LatestRound struct {
				field.RelationField
				Campaign struct {
					field.RelationField
				}
				Creator struct {
					field.RelationField
				}
				DependsOnRound struct {
					field.RelationField
				}
				Roles struct {
					field.RelationField
				}
			}
			Roles struct {
				field.RelationField
			}
			Rounds struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Roles.Campaign", "models.Campaign"),
			CreatedBy: struct {
				field.RelationField
				LeadingProject struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Roles.Campaign.CreatedBy", "models.User"),
				LeadingProject: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Roles.Campaign.CreatedBy.LeadingProject", "models.Project"),
				},
			},
			Project: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Roles.Campaign.Project", "models.Project"),
			},
			LatestRound: struct {
				field.RelationField
				Campaign struct {
					field.RelationField
				}
				Creator struct {
					field.RelationField
				}
				DependsOnRound struct {
					field.RelationField
				}
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Roles.Campaign.LatestRound", "models.Round"),
				Campaign: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Roles.Campaign.LatestRound.Campaign", "models.Campaign"),
				},
				Creator: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Roles.Campaign.LatestRound.Creator", "models.User"),
				},
				DependsOnRound: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Roles.Campaign.LatestRound.DependsOnRound", "models.Round"),
				},
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Roles.Campaign.LatestRound.Roles", "models.Role"),
				},
			},
			Roles: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Roles.Campaign.Roles", "models.Role"),
			},
			Rounds: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Roles.Campaign.Rounds", "models.Round"),
			},
		},
		User: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Roles.User", "models.User"),
		},
		Round: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Roles.Round", "models.Round"),
		},
		Project: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Roles.Project", "models.Project"),
		},
	}

	_round.Campaign = roundBelongsToCampaign{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Campaign", "models.Campaign"),
	}

	_round.Creator = roundBelongsToCreator{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Creator", "models.User"),
	}

	_round.DependsOnRound = roundBelongsToDependsOnRound{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("DependsOnRound", "models.Round"),
	}

	_round.fillFieldMap()

	return _round
}

type round struct {
	roundDo

	ALL                              field.Asterisk
	RoundID                          field.String
	CampaignID                       field.String
	ProjectID                        field.String
	CreatedAt                        field.Time
	CreatedByID                      field.String
	TotalSubmissions                 field.Int
	TotalAssignments                 field.Int
	TotalEvaluatedAssignments        field.Int
	TotalEvaluatedSubmissions        field.Int
	Status                           field.String
	LatestDistributionTaskID         field.String
	Name                             field.String
	Description                      field.String
	StartDate                        field.Time
	EndDate                          field.Time
	IsOpen                           field.Bool
	IsPublicJury                     field.Bool
	DependsOnRoundID                 field.String
	Serial                           field.Int
	Quorum                           field.Uint
	Type                             field.String
	AllowJuryToParticipate           field.Bool
	AllowMultipleJudgement           field.Bool
	SecretBallot                     field.Bool
	Blacklist                        field.String
	ImageMinimumResolution           field.Int
	ImageMinimumSizeBytes            field.Int
	AudioMinimumDurationMilliseconds field.Int
	AudioMinimumSizeBytes            field.Int
	VideoMinimumDurationMilliseconds field.Int
	VideoMinimumSizeBytes            field.Int
	VideoMinimumResolution           field.Int
	MaximumSubmissionOfSameArticle   field.Int
	ArticleAllowExpansions           field.Bool
	ArticleAllowCreations            field.Bool
	ArticleMinimumTotalBytes         field.Int
	ArticleMinimumTotalWords         field.Int
	ArticleMinimumAddedBytes         field.Int
	ArticleMinimumAddedWords         field.Int
	AllowedMediaTypes                field.Field
	Roles                            roundHasManyRoles

	Campaign roundBelongsToCampaign

	Creator roundBelongsToCreator

	DependsOnRound roundBelongsToDependsOnRound

	fieldMap map[string]field.Expr
}

func (r round) Table(newTableName string) *round {
	r.roundDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r round) As(alias string) *round {
	r.roundDo.DO = *(r.roundDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *round) updateTableName(table string) *round {
	r.ALL = field.NewAsterisk(table)
	r.RoundID = field.NewString(table, "round_id")
	r.CampaignID = field.NewString(table, "campaign_id")
	r.ProjectID = field.NewString(table, "project_id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.CreatedByID = field.NewString(table, "created_by_id")
	r.TotalSubmissions = field.NewInt(table, "total_submissions")
	r.TotalAssignments = field.NewInt(table, "total_assignments")
	r.TotalEvaluatedAssignments = field.NewInt(table, "total_evaluated_assignments")
	r.TotalEvaluatedSubmissions = field.NewInt(table, "total_evaluated_submissions")
	r.Status = field.NewString(table, "status")
	r.LatestDistributionTaskID = field.NewString(table, "latest_distribution_task_id")
	r.Name = field.NewString(table, "name")
	r.Description = field.NewString(table, "description")
	r.StartDate = field.NewTime(table, "start_date")
	r.EndDate = field.NewTime(table, "end_date")
	r.IsOpen = field.NewBool(table, "is_open")
	r.IsPublicJury = field.NewBool(table, "is_public_jury")
	r.DependsOnRoundID = field.NewString(table, "depends_on_round_id")
	r.Serial = field.NewInt(table, "serial")
	r.Quorum = field.NewUint(table, "quorum")
	r.Type = field.NewString(table, "type")
	r.AllowJuryToParticipate = field.NewBool(table, "allow_jury_to_participate")
	r.AllowMultipleJudgement = field.NewBool(table, "allow_multiple_judgement")
	r.SecretBallot = field.NewBool(table, "secret_ballot")
	r.Blacklist = field.NewString(table, "blacklist")
	r.ImageMinimumResolution = field.NewInt(table, "image_minimum_resolution")
	r.ImageMinimumSizeBytes = field.NewInt(table, "image_minimum_size_bytes")
	r.AudioMinimumDurationMilliseconds = field.NewInt(table, "audio_minimum_duration_milliseconds")
	r.AudioMinimumSizeBytes = field.NewInt(table, "audio_minimum_size_bytes")
	r.VideoMinimumDurationMilliseconds = field.NewInt(table, "video_minimum_duration_milliseconds")
	r.VideoMinimumSizeBytes = field.NewInt(table, "video_minimum_size_bytes")
	r.VideoMinimumResolution = field.NewInt(table, "video_minimum_resolution")
	r.MaximumSubmissionOfSameArticle = field.NewInt(table, "maximum_submission_of_same_article")
	r.ArticleAllowExpansions = field.NewBool(table, "article_allow_expansions")
	r.ArticleAllowCreations = field.NewBool(table, "article_allow_creations")
	r.ArticleMinimumTotalBytes = field.NewInt(table, "article_minimum_total_bytes")
	r.ArticleMinimumTotalWords = field.NewInt(table, "article_minimum_total_words")
	r.ArticleMinimumAddedBytes = field.NewInt(table, "article_minimum_added_bytes")
	r.ArticleMinimumAddedWords = field.NewInt(table, "article_minimum_added_words")
	r.AllowedMediaTypes = field.NewField(table, "allowed_media_types")

	r.fillFieldMap()

	return r
}

func (r *round) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *round) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 44)
	r.fieldMap["round_id"] = r.RoundID
	r.fieldMap["campaign_id"] = r.CampaignID
	r.fieldMap["project_id"] = r.ProjectID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["created_by_id"] = r.CreatedByID
	r.fieldMap["total_submissions"] = r.TotalSubmissions
	r.fieldMap["total_assignments"] = r.TotalAssignments
	r.fieldMap["total_evaluated_assignments"] = r.TotalEvaluatedAssignments
	r.fieldMap["total_evaluated_submissions"] = r.TotalEvaluatedSubmissions
	r.fieldMap["status"] = r.Status
	r.fieldMap["latest_distribution_task_id"] = r.LatestDistributionTaskID
	r.fieldMap["name"] = r.Name
	r.fieldMap["description"] = r.Description
	r.fieldMap["start_date"] = r.StartDate
	r.fieldMap["end_date"] = r.EndDate
	r.fieldMap["is_open"] = r.IsOpen
	r.fieldMap["is_public_jury"] = r.IsPublicJury
	r.fieldMap["depends_on_round_id"] = r.DependsOnRoundID
	r.fieldMap["serial"] = r.Serial
	r.fieldMap["quorum"] = r.Quorum
	r.fieldMap["type"] = r.Type
	r.fieldMap["allow_jury_to_participate"] = r.AllowJuryToParticipate
	r.fieldMap["allow_multiple_judgement"] = r.AllowMultipleJudgement
	r.fieldMap["secret_ballot"] = r.SecretBallot
	r.fieldMap["blacklist"] = r.Blacklist
	r.fieldMap["image_minimum_resolution"] = r.ImageMinimumResolution
	r.fieldMap["image_minimum_size_bytes"] = r.ImageMinimumSizeBytes
	r.fieldMap["audio_minimum_duration_milliseconds"] = r.AudioMinimumDurationMilliseconds
	r.fieldMap["audio_minimum_size_bytes"] = r.AudioMinimumSizeBytes
	r.fieldMap["video_minimum_duration_milliseconds"] = r.VideoMinimumDurationMilliseconds
	r.fieldMap["video_minimum_size_bytes"] = r.VideoMinimumSizeBytes
	r.fieldMap["video_minimum_resolution"] = r.VideoMinimumResolution
	r.fieldMap["maximum_submission_of_same_article"] = r.MaximumSubmissionOfSameArticle
	r.fieldMap["article_allow_expansions"] = r.ArticleAllowExpansions
	r.fieldMap["article_allow_creations"] = r.ArticleAllowCreations
	r.fieldMap["article_minimum_total_bytes"] = r.ArticleMinimumTotalBytes
	r.fieldMap["article_minimum_total_words"] = r.ArticleMinimumTotalWords
	r.fieldMap["article_minimum_added_bytes"] = r.ArticleMinimumAddedBytes
	r.fieldMap["article_minimum_added_words"] = r.ArticleMinimumAddedWords
	r.fieldMap["allowed_media_types"] = r.AllowedMediaTypes

}

func (r round) clone(db *gorm.DB) round {
	r.roundDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r round) replaceDB(db *gorm.DB) round {
	r.roundDo.ReplaceDB(db)
	return r
}

type roundHasManyRoles struct {
	db *gorm.DB

	field.RelationField

	Campaign struct {
		field.RelationField
		CreatedBy struct {
			field.RelationField
			LeadingProject struct {
				field.RelationField
			}
		}
		Project struct {
			field.RelationField
		}
		LatestRound struct {
			field.RelationField
			Campaign struct {
				field.RelationField
			}
			Creator struct {
				field.RelationField
			}
			DependsOnRound struct {
				field.RelationField
			}
			Roles struct {
				field.RelationField
			}
		}
		Roles struct {
			field.RelationField
		}
		Rounds struct {
			field.RelationField
		}
	}
	User struct {
		field.RelationField
	}
	Round struct {
		field.RelationField
	}
	Project struct {
		field.RelationField
	}
}

func (a roundHasManyRoles) Where(conds ...field.Expr) *roundHasManyRoles {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a roundHasManyRoles) WithContext(ctx context.Context) *roundHasManyRoles {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a roundHasManyRoles) Session(session *gorm.Session) *roundHasManyRoles {
	a.db = a.db.Session(session)
	return &a
}

func (a roundHasManyRoles) Model(m *models.Round) *roundHasManyRolesTx {
	return &roundHasManyRolesTx{a.db.Model(m).Association(a.Name())}
}

type roundHasManyRolesTx struct{ tx *gorm.Association }

func (a roundHasManyRolesTx) Find() (result []*models.Role, err error) {
	return result, a.tx.Find(&result)
}

func (a roundHasManyRolesTx) Append(values ...*models.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a roundHasManyRolesTx) Replace(values ...*models.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a roundHasManyRolesTx) Delete(values ...*models.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a roundHasManyRolesTx) Clear() error {
	return a.tx.Clear()
}

func (a roundHasManyRolesTx) Count() int64 {
	return a.tx.Count()
}

type roundBelongsToCampaign struct {
	db *gorm.DB

	field.RelationField
}

func (a roundBelongsToCampaign) Where(conds ...field.Expr) *roundBelongsToCampaign {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a roundBelongsToCampaign) WithContext(ctx context.Context) *roundBelongsToCampaign {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a roundBelongsToCampaign) Session(session *gorm.Session) *roundBelongsToCampaign {
	a.db = a.db.Session(session)
	return &a
}

func (a roundBelongsToCampaign) Model(m *models.Round) *roundBelongsToCampaignTx {
	return &roundBelongsToCampaignTx{a.db.Model(m).Association(a.Name())}
}

type roundBelongsToCampaignTx struct{ tx *gorm.Association }

func (a roundBelongsToCampaignTx) Find() (result *models.Campaign, err error) {
	return result, a.tx.Find(&result)
}

func (a roundBelongsToCampaignTx) Append(values ...*models.Campaign) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a roundBelongsToCampaignTx) Replace(values ...*models.Campaign) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a roundBelongsToCampaignTx) Delete(values ...*models.Campaign) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a roundBelongsToCampaignTx) Clear() error {
	return a.tx.Clear()
}

func (a roundBelongsToCampaignTx) Count() int64 {
	return a.tx.Count()
}

type roundBelongsToCreator struct {
	db *gorm.DB

	field.RelationField
}

func (a roundBelongsToCreator) Where(conds ...field.Expr) *roundBelongsToCreator {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a roundBelongsToCreator) WithContext(ctx context.Context) *roundBelongsToCreator {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a roundBelongsToCreator) Session(session *gorm.Session) *roundBelongsToCreator {
	a.db = a.db.Session(session)
	return &a
}

func (a roundBelongsToCreator) Model(m *models.Round) *roundBelongsToCreatorTx {
	return &roundBelongsToCreatorTx{a.db.Model(m).Association(a.Name())}
}

type roundBelongsToCreatorTx struct{ tx *gorm.Association }

func (a roundBelongsToCreatorTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a roundBelongsToCreatorTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a roundBelongsToCreatorTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a roundBelongsToCreatorTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a roundBelongsToCreatorTx) Clear() error {
	return a.tx.Clear()
}

func (a roundBelongsToCreatorTx) Count() int64 {
	return a.tx.Count()
}

type roundBelongsToDependsOnRound struct {
	db *gorm.DB

	field.RelationField
}

func (a roundBelongsToDependsOnRound) Where(conds ...field.Expr) *roundBelongsToDependsOnRound {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a roundBelongsToDependsOnRound) WithContext(ctx context.Context) *roundBelongsToDependsOnRound {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a roundBelongsToDependsOnRound) Session(session *gorm.Session) *roundBelongsToDependsOnRound {
	a.db = a.db.Session(session)
	return &a
}

func (a roundBelongsToDependsOnRound) Model(m *models.Round) *roundBelongsToDependsOnRoundTx {
	return &roundBelongsToDependsOnRoundTx{a.db.Model(m).Association(a.Name())}
}

type roundBelongsToDependsOnRoundTx struct{ tx *gorm.Association }

func (a roundBelongsToDependsOnRoundTx) Find() (result *models.Round, err error) {
	return result, a.tx.Find(&result)
}

func (a roundBelongsToDependsOnRoundTx) Append(values ...*models.Round) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a roundBelongsToDependsOnRoundTx) Replace(values ...*models.Round) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a roundBelongsToDependsOnRoundTx) Delete(values ...*models.Round) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a roundBelongsToDependsOnRoundTx) Clear() error {
	return a.tx.Clear()
}

func (a roundBelongsToDependsOnRoundTx) Count() int64 {
	return a.tx.Count()
}

type roundDo struct{ gen.DO }

type IRoundDo interface {
	gen.SubQuery
	Debug() IRoundDo
	WithContext(ctx context.Context) IRoundDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoundDo
	WriteDB() IRoundDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoundDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoundDo
	Not(conds ...gen.Condition) IRoundDo
	Or(conds ...gen.Condition) IRoundDo
	Select(conds ...field.Expr) IRoundDo
	Where(conds ...gen.Condition) IRoundDo
	Order(conds ...field.Expr) IRoundDo
	Distinct(cols ...field.Expr) IRoundDo
	Omit(cols ...field.Expr) IRoundDo
	Join(table schema.Tabler, on ...field.Expr) IRoundDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoundDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoundDo
	Group(cols ...field.Expr) IRoundDo
	Having(conds ...gen.Condition) IRoundDo
	Limit(limit int) IRoundDo
	Offset(offset int) IRoundDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoundDo
	Unscoped() IRoundDo
	Create(values ...*models.Round) error
	CreateInBatches(values []*models.Round, batchSize int) error
	Save(values ...*models.Round) error
	First() (*models.Round, error)
	Take() (*models.Round, error)
	Last() (*models.Round, error)
	Find() ([]*models.Round, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Round, err error)
	FindInBatches(result *[]*models.Round, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Round) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoundDo
	Assign(attrs ...field.AssignExpr) IRoundDo
	Joins(fields ...field.RelationField) IRoundDo
	Preload(fields ...field.RelationField) IRoundDo
	FirstOrInit() (*models.Round, error)
	FirstOrCreate() (*models.Round, error)
	FindByPage(offset int, limit int) (result []*models.Round, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoundDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r roundDo) Debug() IRoundDo {
	return r.withDO(r.DO.Debug())
}

func (r roundDo) WithContext(ctx context.Context) IRoundDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roundDo) ReadDB() IRoundDo {
	return r.Clauses(dbresolver.Read)
}

func (r roundDo) WriteDB() IRoundDo {
	return r.Clauses(dbresolver.Write)
}

func (r roundDo) Session(config *gorm.Session) IRoundDo {
	return r.withDO(r.DO.Session(config))
}

func (r roundDo) Clauses(conds ...clause.Expression) IRoundDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roundDo) Returning(value interface{}, columns ...string) IRoundDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roundDo) Not(conds ...gen.Condition) IRoundDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roundDo) Or(conds ...gen.Condition) IRoundDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roundDo) Select(conds ...field.Expr) IRoundDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roundDo) Where(conds ...gen.Condition) IRoundDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roundDo) Order(conds ...field.Expr) IRoundDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roundDo) Distinct(cols ...field.Expr) IRoundDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roundDo) Omit(cols ...field.Expr) IRoundDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roundDo) Join(table schema.Tabler, on ...field.Expr) IRoundDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roundDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoundDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roundDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoundDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roundDo) Group(cols ...field.Expr) IRoundDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roundDo) Having(conds ...gen.Condition) IRoundDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roundDo) Limit(limit int) IRoundDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roundDo) Offset(offset int) IRoundDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roundDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoundDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roundDo) Unscoped() IRoundDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roundDo) Create(values ...*models.Round) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roundDo) CreateInBatches(values []*models.Round, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roundDo) Save(values ...*models.Round) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roundDo) First() (*models.Round, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Round), nil
	}
}

func (r roundDo) Take() (*models.Round, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Round), nil
	}
}

func (r roundDo) Last() (*models.Round, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Round), nil
	}
}

func (r roundDo) Find() ([]*models.Round, error) {
	result, err := r.DO.Find()
	return result.([]*models.Round), err
}

func (r roundDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Round, err error) {
	buf := make([]*models.Round, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roundDo) FindInBatches(result *[]*models.Round, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roundDo) Attrs(attrs ...field.AssignExpr) IRoundDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roundDo) Assign(attrs ...field.AssignExpr) IRoundDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roundDo) Joins(fields ...field.RelationField) IRoundDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roundDo) Preload(fields ...field.RelationField) IRoundDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roundDo) FirstOrInit() (*models.Round, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Round), nil
	}
}

func (r roundDo) FirstOrCreate() (*models.Round, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Round), nil
	}
}

func (r roundDo) FindByPage(offset int, limit int) (result []*models.Round, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roundDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roundDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roundDo) Delete(models ...*models.Round) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roundDo) withDO(do gen.Dao) *roundDo {
	r.DO = *do.(*gen.DO)
	return r
}
