// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nokib/campwiz/models"
)

func newRoundResult(db *gorm.DB, opts ...gen.DOOption) roundResult {
	_roundResult := roundResult{}

	_roundResult.roundResultDo.UseDB(db, opts...)
	_roundResult.roundResultDo.UseModel(&models.RoundResult{})

	tableName := _roundResult.roundResultDo.TableName()
	_roundResult.ALL = field.NewAsterisk(tableName)
	_roundResult.AverageScore = field.NewFloat64(tableName, "average_score")
	_roundResult.SubmissionCount = field.NewInt(tableName, "submission_count")

	_roundResult.fillFieldMap()

	return _roundResult
}

type roundResult struct {
	roundResultDo

	ALL             field.Asterisk
	AverageScore    field.Float64
	SubmissionCount field.Int

	fieldMap map[string]field.Expr
}

func (r roundResult) Table(newTableName string) *roundResult {
	r.roundResultDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roundResult) As(alias string) *roundResult {
	r.roundResultDo.DO = *(r.roundResultDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roundResult) updateTableName(table string) *roundResult {
	r.ALL = field.NewAsterisk(table)
	r.AverageScore = field.NewFloat64(table, "average_score")
	r.SubmissionCount = field.NewInt(table, "submission_count")

	r.fillFieldMap()

	return r
}

func (r *roundResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roundResult) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 2)
	r.fieldMap["average_score"] = r.AverageScore
	r.fieldMap["submission_count"] = r.SubmissionCount
}

func (r roundResult) clone(db *gorm.DB) roundResult {
	r.roundResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roundResult) replaceDB(db *gorm.DB) roundResult {
	r.roundResultDo.ReplaceDB(db)
	return r
}

type roundResultDo struct{ gen.DO }

type IRoundResultDo interface {
	gen.SubQuery
	Debug() IRoundResultDo
	WithContext(ctx context.Context) IRoundResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoundResultDo
	WriteDB() IRoundResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoundResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoundResultDo
	Not(conds ...gen.Condition) IRoundResultDo
	Or(conds ...gen.Condition) IRoundResultDo
	Select(conds ...field.Expr) IRoundResultDo
	Where(conds ...gen.Condition) IRoundResultDo
	Order(conds ...field.Expr) IRoundResultDo
	Distinct(cols ...field.Expr) IRoundResultDo
	Omit(cols ...field.Expr) IRoundResultDo
	Join(table schema.Tabler, on ...field.Expr) IRoundResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoundResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoundResultDo
	Group(cols ...field.Expr) IRoundResultDo
	Having(conds ...gen.Condition) IRoundResultDo
	Limit(limit int) IRoundResultDo
	Offset(offset int) IRoundResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoundResultDo
	Unscoped() IRoundResultDo
	Create(values ...*models.RoundResult) error
	CreateInBatches(values []*models.RoundResult, batchSize int) error
	Save(values ...*models.RoundResult) error
	First() (*models.RoundResult, error)
	Take() (*models.RoundResult, error)
	Last() (*models.RoundResult, error)
	Find() ([]*models.RoundResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RoundResult, err error)
	FindInBatches(result *[]*models.RoundResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.RoundResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoundResultDo
	Assign(attrs ...field.AssignExpr) IRoundResultDo
	Joins(fields ...field.RelationField) IRoundResultDo
	Preload(fields ...field.RelationField) IRoundResultDo
	FirstOrInit() (*models.RoundResult, error)
	FirstOrCreate() (*models.RoundResult, error)
	FindByPage(offset int, limit int) (result []*models.RoundResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoundResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRoundResults(roundID string, limit int) (result []models.RoundResult, err error)
}

// Select Score, count(submission_id) as SubmissionCount FROM submissions WHERE current_round_id = @roundID GROUP BY score ORDER BY score LIMIT @limit
func (r roundResultDo) GetRoundResults(roundID string, limit int) (result []models.RoundResult, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, roundID)
	params = append(params, limit)
	generateSQL.WriteString("Select Score, count(submission_id) as SubmissionCount FROM submissions WHERE current_round_id = ? GROUP BY score ORDER BY score LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (r roundResultDo) Debug() IRoundResultDo {
	return r.withDO(r.DO.Debug())
}

func (r roundResultDo) WithContext(ctx context.Context) IRoundResultDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roundResultDo) ReadDB() IRoundResultDo {
	return r.Clauses(dbresolver.Read)
}

func (r roundResultDo) WriteDB() IRoundResultDo {
	return r.Clauses(dbresolver.Write)
}

func (r roundResultDo) Session(config *gorm.Session) IRoundResultDo {
	return r.withDO(r.DO.Session(config))
}

func (r roundResultDo) Clauses(conds ...clause.Expression) IRoundResultDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roundResultDo) Returning(value interface{}, columns ...string) IRoundResultDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roundResultDo) Not(conds ...gen.Condition) IRoundResultDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roundResultDo) Or(conds ...gen.Condition) IRoundResultDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roundResultDo) Select(conds ...field.Expr) IRoundResultDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roundResultDo) Where(conds ...gen.Condition) IRoundResultDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roundResultDo) Order(conds ...field.Expr) IRoundResultDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roundResultDo) Distinct(cols ...field.Expr) IRoundResultDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roundResultDo) Omit(cols ...field.Expr) IRoundResultDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roundResultDo) Join(table schema.Tabler, on ...field.Expr) IRoundResultDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roundResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoundResultDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roundResultDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoundResultDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roundResultDo) Group(cols ...field.Expr) IRoundResultDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roundResultDo) Having(conds ...gen.Condition) IRoundResultDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roundResultDo) Limit(limit int) IRoundResultDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roundResultDo) Offset(offset int) IRoundResultDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roundResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoundResultDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roundResultDo) Unscoped() IRoundResultDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roundResultDo) Create(values ...*models.RoundResult) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roundResultDo) CreateInBatches(values []*models.RoundResult, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roundResultDo) Save(values ...*models.RoundResult) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roundResultDo) First() (*models.RoundResult, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundResult), nil
	}
}

func (r roundResultDo) Take() (*models.RoundResult, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundResult), nil
	}
}

func (r roundResultDo) Last() (*models.RoundResult, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundResult), nil
	}
}

func (r roundResultDo) Find() ([]*models.RoundResult, error) {
	result, err := r.DO.Find()
	return result.([]*models.RoundResult), err
}

func (r roundResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RoundResult, err error) {
	buf := make([]*models.RoundResult, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roundResultDo) FindInBatches(result *[]*models.RoundResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roundResultDo) Attrs(attrs ...field.AssignExpr) IRoundResultDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roundResultDo) Assign(attrs ...field.AssignExpr) IRoundResultDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roundResultDo) Joins(fields ...field.RelationField) IRoundResultDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roundResultDo) Preload(fields ...field.RelationField) IRoundResultDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roundResultDo) FirstOrInit() (*models.RoundResult, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundResult), nil
	}
}

func (r roundResultDo) FirstOrCreate() (*models.RoundResult, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundResult), nil
	}
}

func (r roundResultDo) FindByPage(offset int, limit int) (result []*models.RoundResult, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roundResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roundResultDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roundResultDo) Delete(models ...*models.RoundResult) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roundResultDo) withDO(do gen.Dao) *roundResultDo {
	r.DO = *do.(*gen.DO)
	return r
}
