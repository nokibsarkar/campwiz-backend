// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nokib/campwiz/models"
)

func newEvaluationResult(db *gorm.DB, opts ...gen.DOOption) evaluationResult {
	_evaluationResult := evaluationResult{}

	_evaluationResult.evaluationResultDo.UseDB(db, opts...)
	_evaluationResult.evaluationResultDo.UseModel(&models.EvaluationResult{})

	tableName := _evaluationResult.evaluationResultDo.TableName()
	_evaluationResult.ALL = field.NewAsterisk(tableName)
	_evaluationResult.AverageScore = field.NewFloat64(tableName, "average_score")
	_evaluationResult.SubmissionCount = field.NewInt(tableName, "submission_count")

	_evaluationResult.fillFieldMap()

	return _evaluationResult
}

type evaluationResult struct {
	evaluationResultDo

	ALL             field.Asterisk
	AverageScore    field.Float64
	SubmissionCount field.Int

	fieldMap map[string]field.Expr
}

func (e evaluationResult) Table(newTableName string) *evaluationResult {
	e.evaluationResultDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e evaluationResult) As(alias string) *evaluationResult {
	e.evaluationResultDo.DO = *(e.evaluationResultDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *evaluationResult) updateTableName(table string) *evaluationResult {
	e.ALL = field.NewAsterisk(table)
	e.AverageScore = field.NewFloat64(table, "average_score")
	e.SubmissionCount = field.NewInt(table, "submission_count")

	e.fillFieldMap()

	return e
}

func (e *evaluationResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *evaluationResult) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 2)
	e.fieldMap["average_score"] = e.AverageScore
	e.fieldMap["submission_count"] = e.SubmissionCount
}

func (e evaluationResult) clone(db *gorm.DB) evaluationResult {
	e.evaluationResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e evaluationResult) replaceDB(db *gorm.DB) evaluationResult {
	e.evaluationResultDo.ReplaceDB(db)
	return e
}

type evaluationResultDo struct{ gen.DO }

type IEvaluationResultDo interface {
	gen.SubQuery
	Debug() IEvaluationResultDo
	WithContext(ctx context.Context) IEvaluationResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEvaluationResultDo
	WriteDB() IEvaluationResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEvaluationResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEvaluationResultDo
	Not(conds ...gen.Condition) IEvaluationResultDo
	Or(conds ...gen.Condition) IEvaluationResultDo
	Select(conds ...field.Expr) IEvaluationResultDo
	Where(conds ...gen.Condition) IEvaluationResultDo
	Order(conds ...field.Expr) IEvaluationResultDo
	Distinct(cols ...field.Expr) IEvaluationResultDo
	Omit(cols ...field.Expr) IEvaluationResultDo
	Join(table schema.Tabler, on ...field.Expr) IEvaluationResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEvaluationResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEvaluationResultDo
	Group(cols ...field.Expr) IEvaluationResultDo
	Having(conds ...gen.Condition) IEvaluationResultDo
	Limit(limit int) IEvaluationResultDo
	Offset(offset int) IEvaluationResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEvaluationResultDo
	Unscoped() IEvaluationResultDo
	Create(values ...*models.EvaluationResult) error
	CreateInBatches(values []*models.EvaluationResult, batchSize int) error
	Save(values ...*models.EvaluationResult) error
	First() (*models.EvaluationResult, error)
	Take() (*models.EvaluationResult, error)
	Last() (*models.EvaluationResult, error)
	Find() ([]*models.EvaluationResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.EvaluationResult, err error)
	FindInBatches(result *[]*models.EvaluationResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.EvaluationResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEvaluationResultDo
	Assign(attrs ...field.AssignExpr) IEvaluationResultDo
	Joins(fields ...field.RelationField) IEvaluationResultDo
	Preload(fields ...field.RelationField) IEvaluationResultDo
	FirstOrInit() (*models.EvaluationResult, error)
	FirstOrCreate() (*models.EvaluationResult, error)
	FindByPage(offset int, limit int) (result []*models.EvaluationResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEvaluationResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRoundResults(roundID string, limit int) (result []models.EvaluationResult, err error)
}

// Select score AS AverageScore, count(submission_id) as SubmissionCount FROM submissions WHERE current_round_id = @roundID GROUP BY score ORDER BY score LIMIT @limit
func (e evaluationResultDo) GetRoundResults(roundID string, limit int) (result []models.EvaluationResult, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, roundID)
	params = append(params, limit)
	generateSQL.WriteString("Select score AS AverageScore, count(submission_id) as SubmissionCount FROM submissions WHERE current_round_id = ? GROUP BY score ORDER BY score LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (e evaluationResultDo) Debug() IEvaluationResultDo {
	return e.withDO(e.DO.Debug())
}

func (e evaluationResultDo) WithContext(ctx context.Context) IEvaluationResultDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e evaluationResultDo) ReadDB() IEvaluationResultDo {
	return e.Clauses(dbresolver.Read)
}

func (e evaluationResultDo) WriteDB() IEvaluationResultDo {
	return e.Clauses(dbresolver.Write)
}

func (e evaluationResultDo) Session(config *gorm.Session) IEvaluationResultDo {
	return e.withDO(e.DO.Session(config))
}

func (e evaluationResultDo) Clauses(conds ...clause.Expression) IEvaluationResultDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e evaluationResultDo) Returning(value interface{}, columns ...string) IEvaluationResultDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e evaluationResultDo) Not(conds ...gen.Condition) IEvaluationResultDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e evaluationResultDo) Or(conds ...gen.Condition) IEvaluationResultDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e evaluationResultDo) Select(conds ...field.Expr) IEvaluationResultDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e evaluationResultDo) Where(conds ...gen.Condition) IEvaluationResultDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e evaluationResultDo) Order(conds ...field.Expr) IEvaluationResultDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e evaluationResultDo) Distinct(cols ...field.Expr) IEvaluationResultDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e evaluationResultDo) Omit(cols ...field.Expr) IEvaluationResultDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e evaluationResultDo) Join(table schema.Tabler, on ...field.Expr) IEvaluationResultDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e evaluationResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEvaluationResultDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e evaluationResultDo) RightJoin(table schema.Tabler, on ...field.Expr) IEvaluationResultDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e evaluationResultDo) Group(cols ...field.Expr) IEvaluationResultDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e evaluationResultDo) Having(conds ...gen.Condition) IEvaluationResultDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e evaluationResultDo) Limit(limit int) IEvaluationResultDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e evaluationResultDo) Offset(offset int) IEvaluationResultDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e evaluationResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEvaluationResultDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e evaluationResultDo) Unscoped() IEvaluationResultDo {
	return e.withDO(e.DO.Unscoped())
}

func (e evaluationResultDo) Create(values ...*models.EvaluationResult) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e evaluationResultDo) CreateInBatches(values []*models.EvaluationResult, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e evaluationResultDo) Save(values ...*models.EvaluationResult) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e evaluationResultDo) First() (*models.EvaluationResult, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.EvaluationResult), nil
	}
}

func (e evaluationResultDo) Take() (*models.EvaluationResult, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.EvaluationResult), nil
	}
}

func (e evaluationResultDo) Last() (*models.EvaluationResult, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.EvaluationResult), nil
	}
}

func (e evaluationResultDo) Find() ([]*models.EvaluationResult, error) {
	result, err := e.DO.Find()
	return result.([]*models.EvaluationResult), err
}

func (e evaluationResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.EvaluationResult, err error) {
	buf := make([]*models.EvaluationResult, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e evaluationResultDo) FindInBatches(result *[]*models.EvaluationResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e evaluationResultDo) Attrs(attrs ...field.AssignExpr) IEvaluationResultDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e evaluationResultDo) Assign(attrs ...field.AssignExpr) IEvaluationResultDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e evaluationResultDo) Joins(fields ...field.RelationField) IEvaluationResultDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e evaluationResultDo) Preload(fields ...field.RelationField) IEvaluationResultDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e evaluationResultDo) FirstOrInit() (*models.EvaluationResult, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.EvaluationResult), nil
	}
}

func (e evaluationResultDo) FirstOrCreate() (*models.EvaluationResult, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.EvaluationResult), nil
	}
}

func (e evaluationResultDo) FindByPage(offset int, limit int) (result []*models.EvaluationResult, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e evaluationResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e evaluationResultDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e evaluationResultDo) Delete(models ...*models.EvaluationResult) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *evaluationResultDo) withDO(do gen.Dao) *evaluationResultDo {
	e.DO = *do.(*gen.DO)
	return e
}
