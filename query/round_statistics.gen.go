// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nokib/campwiz/models"
)

func newRoundStatistics(db *gorm.DB, opts ...gen.DOOption) roundStatistics {
	_roundStatistics := roundStatistics{}

	_roundStatistics.roundStatisticsDo.UseDB(db, opts...)
	_roundStatistics.roundStatisticsDo.UseModel(&models.RoundStatistics{})

	tableName := _roundStatistics.roundStatisticsDo.TableName()
	_roundStatistics.ALL = field.NewAsterisk(tableName)
	_roundStatistics.RoundID = field.NewString(tableName, "round_id")
	_roundStatistics.AssignmentCount = field.NewInt(tableName, "assignment_count")
	_roundStatistics.EvaluationCount = field.NewInt(tableName, "evaluation_count")

	_roundStatistics.fillFieldMap()

	return _roundStatistics
}

type roundStatistics struct {
	roundStatisticsDo

	ALL             field.Asterisk
	RoundID         field.String
	AssignmentCount field.Int
	EvaluationCount field.Int

	fieldMap map[string]field.Expr
}

func (r roundStatistics) Table(newTableName string) *roundStatistics {
	r.roundStatisticsDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roundStatistics) As(alias string) *roundStatistics {
	r.roundStatisticsDo.DO = *(r.roundStatisticsDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roundStatistics) updateTableName(table string) *roundStatistics {
	r.ALL = field.NewAsterisk(table)
	r.RoundID = field.NewString(table, "round_id")
	r.AssignmentCount = field.NewInt(table, "assignment_count")
	r.EvaluationCount = field.NewInt(table, "evaluation_count")

	r.fillFieldMap()

	return r
}

func (r *roundStatistics) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roundStatistics) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["round_id"] = r.RoundID
	r.fieldMap["assignment_count"] = r.AssignmentCount
	r.fieldMap["evaluation_count"] = r.EvaluationCount
}

func (r roundStatistics) clone(db *gorm.DB) roundStatistics {
	r.roundStatisticsDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roundStatistics) replaceDB(db *gorm.DB) roundStatistics {
	r.roundStatisticsDo.ReplaceDB(db)
	return r
}

type roundStatisticsDo struct{ gen.DO }

type IRoundStatisticsDo interface {
	gen.SubQuery
	Debug() IRoundStatisticsDo
	WithContext(ctx context.Context) IRoundStatisticsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoundStatisticsDo
	WriteDB() IRoundStatisticsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoundStatisticsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoundStatisticsDo
	Not(conds ...gen.Condition) IRoundStatisticsDo
	Or(conds ...gen.Condition) IRoundStatisticsDo
	Select(conds ...field.Expr) IRoundStatisticsDo
	Where(conds ...gen.Condition) IRoundStatisticsDo
	Order(conds ...field.Expr) IRoundStatisticsDo
	Distinct(cols ...field.Expr) IRoundStatisticsDo
	Omit(cols ...field.Expr) IRoundStatisticsDo
	Join(table schema.Tabler, on ...field.Expr) IRoundStatisticsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoundStatisticsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoundStatisticsDo
	Group(cols ...field.Expr) IRoundStatisticsDo
	Having(conds ...gen.Condition) IRoundStatisticsDo
	Limit(limit int) IRoundStatisticsDo
	Offset(offset int) IRoundStatisticsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoundStatisticsDo
	Unscoped() IRoundStatisticsDo
	Create(values ...*models.RoundStatistics) error
	CreateInBatches(values []*models.RoundStatistics, batchSize int) error
	Save(values ...*models.RoundStatistics) error
	First() (*models.RoundStatistics, error)
	Take() (*models.RoundStatistics, error)
	Last() (*models.RoundStatistics, error)
	Find() ([]*models.RoundStatistics, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RoundStatistics, err error)
	FindInBatches(result *[]*models.RoundStatistics, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.RoundStatistics) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoundStatisticsDo
	Assign(attrs ...field.AssignExpr) IRoundStatisticsDo
	Joins(fields ...field.RelationField) IRoundStatisticsDo
	Preload(fields ...field.RelationField) IRoundStatisticsDo
	FirstOrInit() (*models.RoundStatistics, error)
	FirstOrCreate() (*models.RoundStatistics, error)
	FindByPage(offset int, limit int) (result []*models.RoundStatistics, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoundStatisticsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FetchByRoundID(round_id string) (result []models.RoundStatistics, err error)
	UpdateByRoundID(round_id string) (err error)
	FetchUserStatisticsByRoundIDs(round_ids []string) (result []models.RoundStatisticsView, err error)
}

// SELECT SUM(`assignment_count`) AS `AssignmentCount`, SUM(`evaluation_count`) AS EvaluationCount, `round_id` AS `round_id` FROM `submissions` WHERE `round_id` = @round_id
func (r roundStatisticsDo) FetchByRoundID(round_id string) (result []models.RoundStatistics, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, round_id)
	generateSQL.WriteString("SELECT SUM(`assignment_count`) AS `AssignmentCount`, SUM(`evaluation_count`) AS EvaluationCount, `round_id` AS `round_id` FROM `submissions` WHERE `round_id` = ? ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE rounds,
// (SELECT s.round_id, COUNT(*) AS TotalSubmissions, SUM(s.assignment_count) AS TotalAssignments,
// SUM(s.evaluation_count) AS TotalEvaluatedAssignments, SUM(CASE WHEN s.evaluation_count >= r.quorum THEN 1 ELSE 0 END)
// AS TotalEvaluatedSubmissions, SUM(s.score) AS TotalScore FROM submissions s FORCE INDEX (idx_submissions_round_id)
// JOIN rounds r ON s.round_id = r.round_id WHERE s.round_id = @round_id LIMIT 1) AS s_data
// SET rounds.total_submissions = s_data.TotalSubmissions,
// rounds.total_assignments = s_data.TotalAssignments, rounds.total_evaluated_assignments = s_data.TotalEvaluatedAssignments,
// rounds.total_evaluated_submissions = s_data.TotalEvaluatedSubmissions, rounds.total_score = s_data.TotalScore
// WHERE rounds.round_id = @round_id;
func (r roundStatisticsDo) UpdateByRoundID(round_id string) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, round_id)
	params = append(params, round_id)
	generateSQL.WriteString("UPDATE rounds, (SELECT s.round_id, COUNT(*) AS TotalSubmissions, SUM(s.assignment_count) AS TotalAssignments, SUM(s.evaluation_count) AS TotalEvaluatedAssignments, SUM(CASE WHEN s.evaluation_count >= r.quorum THEN 1 ELSE 0 END) AS TotalEvaluatedSubmissions, SUM(s.score) AS TotalScore FROM submissions s FORCE INDEX (idx_submissions_round_id) JOIN rounds r ON s.round_id = r.round_id WHERE s.round_id = ? LIMIT 1) AS s_data SET rounds.total_submissions = s_data.TotalSubmissions, rounds.total_assignments = s_data.TotalAssignments, rounds.total_evaluated_assignments = s_data.TotalEvaluatedAssignments, rounds.total_evaluated_submissions = s_data.TotalEvaluatedSubmissions, rounds.total_score = s_data.TotalScore WHERE rounds.round_id = ?; ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
// users.username AS participant_name,
// rounds.name AS round_name,
// rounds.round_id AS round_id,
// submissions.participant_id AS participant_id,
// COUNT(submissions.submission_id) AS total_submissions,
// SUM(submissions.score) AS total_score
// FROM `submissions`
// LEFT JOIN rounds ON submissions.round_id = rounds.round_id
// LEFT JOIN users ON submissions.participant_id = users.user_id
// WHERE rounds.round_id IN (@round_ids)
// AND submissions.round_id IN (@round_ids)
// GROUP BY `submissions`.`participant_id`
// ORDER BY total_score DESC, total_submissions DESC;
func (r roundStatisticsDo) FetchUserStatisticsByRoundIDs(round_ids []string) (result []models.RoundStatisticsView, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, round_ids)
	params = append(params, round_ids)
	generateSQL.WriteString("SELECT users.username AS participant_name, rounds.name AS round_name, rounds.round_id AS round_id, submissions.participant_id AS participant_id, COUNT(submissions.submission_id) AS total_submissions, SUM(submissions.score) AS total_score FROM `submissions` LEFT JOIN rounds ON submissions.round_id = rounds.round_id LEFT JOIN users ON submissions.participant_id = users.user_id WHERE rounds.round_id IN (?) AND submissions.round_id IN (?) GROUP BY `submissions`.`participant_id` ORDER BY total_score DESC, total_submissions DESC; ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (r roundStatisticsDo) Debug() IRoundStatisticsDo {
	return r.withDO(r.DO.Debug())
}

func (r roundStatisticsDo) WithContext(ctx context.Context) IRoundStatisticsDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roundStatisticsDo) ReadDB() IRoundStatisticsDo {
	return r.Clauses(dbresolver.Read)
}

func (r roundStatisticsDo) WriteDB() IRoundStatisticsDo {
	return r.Clauses(dbresolver.Write)
}

func (r roundStatisticsDo) Session(config *gorm.Session) IRoundStatisticsDo {
	return r.withDO(r.DO.Session(config))
}

func (r roundStatisticsDo) Clauses(conds ...clause.Expression) IRoundStatisticsDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roundStatisticsDo) Returning(value interface{}, columns ...string) IRoundStatisticsDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roundStatisticsDo) Not(conds ...gen.Condition) IRoundStatisticsDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roundStatisticsDo) Or(conds ...gen.Condition) IRoundStatisticsDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roundStatisticsDo) Select(conds ...field.Expr) IRoundStatisticsDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roundStatisticsDo) Where(conds ...gen.Condition) IRoundStatisticsDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roundStatisticsDo) Order(conds ...field.Expr) IRoundStatisticsDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roundStatisticsDo) Distinct(cols ...field.Expr) IRoundStatisticsDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roundStatisticsDo) Omit(cols ...field.Expr) IRoundStatisticsDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roundStatisticsDo) Join(table schema.Tabler, on ...field.Expr) IRoundStatisticsDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roundStatisticsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoundStatisticsDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roundStatisticsDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoundStatisticsDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roundStatisticsDo) Group(cols ...field.Expr) IRoundStatisticsDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roundStatisticsDo) Having(conds ...gen.Condition) IRoundStatisticsDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roundStatisticsDo) Limit(limit int) IRoundStatisticsDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roundStatisticsDo) Offset(offset int) IRoundStatisticsDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roundStatisticsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoundStatisticsDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roundStatisticsDo) Unscoped() IRoundStatisticsDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roundStatisticsDo) Create(values ...*models.RoundStatistics) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roundStatisticsDo) CreateInBatches(values []*models.RoundStatistics, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roundStatisticsDo) Save(values ...*models.RoundStatistics) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roundStatisticsDo) First() (*models.RoundStatistics, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundStatistics), nil
	}
}

func (r roundStatisticsDo) Take() (*models.RoundStatistics, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundStatistics), nil
	}
}

func (r roundStatisticsDo) Last() (*models.RoundStatistics, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundStatistics), nil
	}
}

func (r roundStatisticsDo) Find() ([]*models.RoundStatistics, error) {
	result, err := r.DO.Find()
	return result.([]*models.RoundStatistics), err
}

func (r roundStatisticsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RoundStatistics, err error) {
	buf := make([]*models.RoundStatistics, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roundStatisticsDo) FindInBatches(result *[]*models.RoundStatistics, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roundStatisticsDo) Attrs(attrs ...field.AssignExpr) IRoundStatisticsDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roundStatisticsDo) Assign(attrs ...field.AssignExpr) IRoundStatisticsDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roundStatisticsDo) Joins(fields ...field.RelationField) IRoundStatisticsDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roundStatisticsDo) Preload(fields ...field.RelationField) IRoundStatisticsDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roundStatisticsDo) FirstOrInit() (*models.RoundStatistics, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundStatistics), nil
	}
}

func (r roundStatisticsDo) FirstOrCreate() (*models.RoundStatistics, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoundStatistics), nil
	}
}

func (r roundStatisticsDo) FindByPage(offset int, limit int) (result []*models.RoundStatistics, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roundStatisticsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roundStatisticsDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roundStatisticsDo) Delete(models ...*models.RoundStatistics) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roundStatisticsDo) withDO(do gen.Dao) *roundStatisticsDo {
	r.DO = *do.(*gen.DO)
	return r
}
