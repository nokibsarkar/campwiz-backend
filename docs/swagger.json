{
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the API documentation for Campwiz",
        "title": "Campwiz API",
        "contact": {},
        "version": "1"
    },
    "basePath": "/api/v2",
    "paths": {
        "/api/v2/permisssions/": {
            "get": {
                "description": "Get the permission map",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "Get the permission map",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-consts_PermissionMap"
                        }
                    }
                }
            }
        },
        "/campaign/": {
            "get": {
                "description": "get all campaigns",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign"
                ],
                "summary": "List all campaigns",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "ids",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether the campaign is closed (result have been finalized)",
                        "name": "isClosed",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether the campaign is hidden from the public list\nIf isHidden is true, then projectID is required",
                        "name": "isHidden",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "next",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "prev",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "This projectID is the project that campaigns belong to.then ProjectID is required\n\t\tIf the person is not an admin, then the project ID must match the project ID of the user",
                        "name": "projectId",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "SortOrderAsc",
                            "SortOrderDesc"
                        ],
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseList-models_Campaign"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new campaign",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign"
                ],
                "summary": "Create a new campaign",
                "parameters": [
                    {
                        "description": "The campaign request",
                        "name": "campaignRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CampaignCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Campaign"
                        }
                    }
                }
            }
        },
        "/campaign/{campaignId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a single campaign",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign"
                ],
                "summary": "Get a single campaign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The campaign ID",
                        "name": "campaignId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "name": "includeProject",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "includeRoles",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "includeRoundRoles",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "includeRounds",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_CampaignExtended"
                        }
                    }
                }
            }
        },
        "/campaign/{campaignId}/status": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a campaign status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign"
                ],
                "summary": "Update a campaign status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The campaign ID",
                        "name": "campaignId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The campaign update status request",
                        "name": "campaignUpdateStatusRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CampaignUpdateStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Campaign"
                        }
                    }
                }
            }
        },
        "/campaign/{id}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a campaign",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign"
                ],
                "summary": "Update a campaign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The campaign ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The campaign request",
                        "name": "campaignRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CampaignUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Campaign"
                        }
                    }
                }
            }
        },
        "/category/uncategorized/{campaignId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a list of uncategorized submissions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Get uncategorized submissions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The campaign ID",
                        "name": "campaignId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseList-models_Submission"
                        }
                    }
                }
            }
        },
        "/category/{submissionId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get categories for a submission",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Get categories for a submission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The submission ID",
                        "name": "submissionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_SubmissionWithCategoryList"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Submit categories for a submission. The Tool would edit on commons usng the token provided in the session. But the token would never be stored in the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Submit categories for a submission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The submission ID",
                        "name": "submissionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The categories to be set and the summary",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.ConfirmSubmitCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_CategoryResponse"
                        }
                    }
                }
            }
        },
        "/category/{submissionId}/preview": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Submit categories preview for a submission",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Submit categories preview for a submission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The submission ID",
                        "name": "submissionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The categories to preview",
                        "name": "categories",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_CategoryResponse"
                        }
                    }
                }
            }
        },
        "/evaluation/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "get all evaluations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evaluation"
                ],
                "summary": "List all evaluations",
                "parameters": [
                    {
                        "type": "string",
                        "name": "campaignId",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "whether to include the submissions that were evaluated",
                        "name": "includeEvaluated",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to include the non-evaluated submissions",
                        "name": "includeNonEvaluated",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "whether to include the submissions that were skipped",
                        "name": "includeSkipped",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to embed the submission object",
                        "name": "includeSubmission",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "juryId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "next",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "prev",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "randomize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "roundId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "submissionId",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ranking",
                            "score",
                            "binary"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "EvaluationTypeRanking",
                            "EvaluationTypeScore",
                            "EvaluationTypeBinary"
                        ],
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "userId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseList-models_Evaluation"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Bulk evaluate",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evaluation"
                ],
                "summary": "Bulk evaluate",
                "parameters": [
                    {
                        "description": "The evaluation request",
                        "name": "evaluationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/services.EvaluationRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseList-models_Evaluation"
                        }
                    }
                }
            }
        },
        "/evaluation/public/{roundId}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Submit a new bulk public evaluation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evaluation"
                ],
                "summary": "Submit a new bulk public evaluation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The evaluation request",
                        "name": "evaluationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/services.EvaluationRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseList-models_Evaluation"
                        }
                    }
                }
            }
        },
        "/evaluation/public/{roundId}/{submissionId}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Submit a new public evaluation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evaluation"
                ],
                "summary": "Submit a new public evaluation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The submission ID",
                        "name": "submissionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The evaluation request",
                        "name": "evaluationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.EvaluationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Evaluation"
                        }
                    }
                }
            }
        },
        "/evaluation/{evaluationId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "get an evaluation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evaluation"
                ],
                "summary": "Get an evaluation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Evaluation ID",
                        "name": "evaluationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Evaluation"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an evaluation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evaluation"
                ],
                "summary": "Update an evaluation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The evaluation ID",
                        "name": "evaluationId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The evaluation request",
                        "name": "evaluationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.EvaluationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Evaluation"
                        }
                    }
                }
            }
        },
        "/project/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all projects",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "List all projects",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseList-models_ProjectExtended"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Create a new project",
                "parameters": [
                    {
                        "description": "The project request",
                        "name": "projectRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProjectRequest"
                        }
                    },
                    {
                        "type": "boolean",
                        "description": "Include project leads",
                        "name": "includeProjectLeads",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Project"
                        }
                    }
                }
            }
        },
        "/project/{projectId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a single project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Get a single project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Include project leads",
                        "name": "includeProjectLeads",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Project"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Update a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The project request",
                        "name": "projectRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Project"
                        }
                    }
                }
            }
        },
        "/round/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "get all rounds",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "List all rounds",
                "parameters": [
                    {
                        "type": "string",
                        "name": "campaignId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "next",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "prev",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "PENDING",
                            "IMPORTING",
                            "DISTRIBUTING",
                            "EVALUATING",
                            "REJECTED",
                            "CANCELLED",
                            "PAUSED",
                            "SCHEDULED",
                            "ACTIVE",
                            "COMPLETED"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "RoundStatusPending",
                            "RoundStatusImporting",
                            "RoundStatusDistributing",
                            "RoundStatusEvaluating",
                            "RoundStatusRejected",
                            "RoundStatusCancelled",
                            "RoundStatusPaused",
                            "RoundStatusScheduled",
                            "RoundStatusActive",
                            "RoundStatusCompleted"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseList-models_Round"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new round for a campaign",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Create a new round",
                "parameters": [
                    {
                        "description": "The round request",
                        "name": "roundRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.RoundRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Round"
                        }
                    }
                }
            }
        },
        "/round/distribute/{roundId}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Distribute evaluations to juries",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Distribute evaluations to juries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The distribution request",
                        "name": "DistributionRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.DistributionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Task"
                        }
                    }
                }
            }
        },
        "/round/import/{roundId}/campwizv1": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "The user would provide a round ID and a CampWiz V1 database file and the system would import images from that file",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Import images from CampWiz V1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The import from CampWiz V1 request",
                        "name": "ImportFromCampWizV1Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.ImportFromCampWizV1Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Task"
                        }
                    }
                }
            }
        },
        "/round/import/{roundId}/commons": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "The user would provide a round ID and a list of commons categories and the system would import images from those categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Import images from commons",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The import from commons request",
                        "name": "ImportFromCommons",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.ImportFromCommonsPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Task"
                        }
                    }
                }
            }
        },
        "/round/import/{roundId}/csv": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "The user would provide a round ID and a CSV file path and the system would import images from that CSV file",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Import images from CSV",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The column name of the file name (if exists, it is the slowest way to import. **Not recommended**)",
                        "name": "fileNameColumn",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "The column name of the page ID (if exists, it is the second fastest way to import)",
                        "name": "pageIdColumn",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "The column name of the submission ID (if exists, it is the fastest way to import. **Highly recommended**)",
                        "name": "submissionIdColumn",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "The CSV file (upto 10MB CSV)",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Task"
                        }
                    }
                }
            }
        },
        "/round/import/{roundId}/fountain": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "The user would provide a round ID and a code and the system would import images from that Fountain",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Import images from Fountain",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The import from Fountain request",
                        "name": "ImportFromFountainRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.ImportFromFountainRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Task"
                        }
                    }
                }
            }
        },
        "/round/import/{targetRoundId}/previous": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "The user would provide a round ID and a list of scores and the system would import images from the previous round with those scores",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Import images from previous round",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The target round ID, where the images will be imported",
                        "name": "targetRoundId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The import from previous round request",
                        "name": "ImportFromPreviousRoundPayload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.ImportFromPreviousRoundPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Task"
                        }
                    }
                }
            }
        },
        "/round/{roundId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a round",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Get a round",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Round"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the details of a round",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Update the details of a round",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The round request",
                        "name": "roundRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.RoundRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Round"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a round",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Delete a round",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-routes_RoundDeletedResponse"
                        }
                    }
                }
            }
        },
        "/round/{roundId}/jury": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add the current user as a jury for the round",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Add myself as a jury",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Role"
                        }
                    }
                }
            }
        },
        "/round/{roundId}/next/evaluation": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the next submission evaluation for a jury",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Get the next submission evaluation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseList-models_Evaluation"
                        }
                    }
                }
            }
        },
        "/round/{roundId}/next/public": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the next public submission for a jury",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Get the next public submission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Submission"
                        }
                    }
                }
            }
        },
        "/round/{roundId}/randomize": {
            "post": {
                "description": "Randomize the evaluation distribution",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Randomize the evaluation distribution",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Task"
                        }
                    }
                }
            }
        },
        "/round/{roundId}/results/summary": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get results of a round",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Get results of a round",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseList-models_EvaluationResult"
                        }
                    }
                }
            }
        },
        "/round/{roundId}/results/{format}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get results of a round",
                "produces": [
                    "application/json",
                    "text/csv"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Get results of a round",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "csv",
                            "json"
                        ],
                        "type": "string",
                        "description": "The format of the results",
                        "name": "format",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "next",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "prev",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "ARTICLE",
                                "BITMAP",
                                "AUDIO",
                                "VIDEO",
                                "PDF"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseList-models_SubmissionResult"
                        }
                    }
                }
            }
        },
        "/round/{roundId}/status": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the status of a round",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Round"
                ],
                "summary": "Update the status of a round",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The status request",
                        "name": "UpdateStatusRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.UpdateStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-models_Round"
                        }
                    }
                }
            }
        },
        "/submission/": {
            "get": {
                "description": "get all submissions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submission"
                ],
                "summary": "List all submissions",
                "parameters": [
                    {
                        "type": "string",
                        "name": "campaignId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "next",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "participantId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "prev",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "roundId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseList-models_Submission"
                        }
                    }
                }
            }
        },
        "/submission/{id}": {
            "get": {
                "description": "get a submission",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submission"
                ],
                "summary": "Get a submission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Submission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Submission"
                        }
                    }
                }
            }
        },
        "/task/{taskId}": {
            "get": {
                "description": "The task represents a background job that can be run by the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Get a task by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-services_TaskResponse"
                        }
                    }
                }
            }
        },
        "/task/{taskId}/stream": {
            "get": {
                "description": "The task represents a background job that can be run by the system. This endpoint streams the response",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Get a task by ID but stream the response",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/user/callback": {
            "get": {
                "description": "Handle the OAuth2 callback",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Handle the OAuth2 callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The code from the OAuth2 provider",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The state",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The base URL",
                        "name": "baseURL",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-routes_RedirectResponse"
                        }
                    }
                }
            }
        },
        "/user/callback/write": {
            "get": {
                "description": "Handle the OAuth2 callback for the ReadWrite scope. This endpoint would fetch an access token and set it as a cookie, it would not, by any means, store it on the server. Refresh Token would also be set as a cookie.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Handle the OAuth2 callback for ReadWrite scope",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The code from the OAuth2 provider",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The state",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The base URL",
                        "name": "baseURL",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-routes_RedirectResponse"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "description": "Redirect to the OAuth2 login for ReadOnly scope",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Redirect to the OAuth2 login ReadOnly scope",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The callback URL",
                        "name": "callback",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-routes_RedirectResponse"
                        }
                    }
                }
            }
        },
        "/user/login/write": {
            "get": {
                "description": "Redirect to the OAuth2 login for ReadWrite scope.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Redirect to the OAuth2 login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The callback URL",
                        "name": "callback",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSingle-routes_RedirectResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "consts.Language": {
            "type": "string",
            "enum": [
                "am",
                "ar",
                "as",
                "af",
                "bn",
                "zh",
                "da",
                "nl",
                "en",
                "fi",
                "fr",
                "de",
                "el",
                "gu",
                "ha",
                "hi",
                "ig",
                "it",
                "ja",
                "kn",
                "ko",
                "ml",
                "mr",
                "ne",
                "no",
                "or",
                "om",
                "fa",
                "pt",
                "pa",
                "ru",
                "sa",
                "st",
                "sn",
                "sd",
                "so",
                "es",
                "sw",
                "sv",
                "ta",
                "te",
                "ts",
                "tn",
                "tr",
                "ur",
                "-",
                "ve",
                "xh",
                "yo",
                "zu"
            ],
            "x-enum-varnames": [
                "Amharic",
                "Arabic",
                "Assamese",
                "Afrikaans",
                "Bangla",
                "Chinese",
                "Danish",
                "Dutch",
                "English",
                "Finnish",
                "French",
                "German",
                "Greek",
                "Gujarati",
                "Hausa",
                "Hindi",
                "Igbo",
                "Italian",
                "Japanese",
                "Kannada",
                "Korean",
                "Malayalam",
                "Marathi",
                "Nepali",
                "Norwegian",
                "Odia",
                "Oromo",
                "Persian",
                "Portuguese",
                "Punjabi",
                "Russian",
                "Sanskrit",
                "Sesotho",
                "Shona",
                "Sindhi",
                "Somali",
                "Spanish",
                "Swahili",
                "Swedish",
                "Tamil",
                "Telugu",
                "Tsonga",
                "Tswana",
                "Turkish",
                "Urdu",
                "Undefined",
                "Venda",
                "Xhosa",
                "Yoruba",
                "Zulu"
            ]
        },
        "consts.Permission": {
            "type": "integer",
            "enum": [
                1,
                2,
                4,
                8,
                16,
                32,
                64,
                128,
                256,
                512,
                1024,
                2048,
                4096,
                8192,
                16384,
                32768,
                65536,
                131072,
                262144,
                524288,
                1048576,
                0,
                1,
                327681,
                1306753,
                1310593,
                1310713
            ],
            "x-enum-comments": {
                "PermissionGroupADMIN": "access other projects",
                "PermissionGroupCoordinator": "randomize the submissions",
                "PermissionGroupJury": "see the evaluation results of the evaluations they have done",
                "PermissionGroupLead": "delete a campaign"
            },
            "x-enum-varnames": [
                "PermissionGroupBanned",
                "PermissionGroupUSER",
                "PermissionGroupJury",
                "PermissionGroupCoordinator",
                "PermissionGroupLead",
                "PermissionGroupADMIN"
            ]
        },
        "consts.PermissionGroup": {
            "type": "integer",
            "enum": [
                1,
                2,
                4,
                8,
                16,
                32,
                64,
                128,
                256,
                512,
                1024,
                2048,
                4096,
                8192,
                16384,
                32768,
                65536,
                131072,
                262144,
                524288,
                1048576,
                0,
                1,
                327681,
                1306753,
                1310593,
                1310713
            ],
            "x-enum-comments": {
                "PermissionGroupADMIN": "access other projects",
                "PermissionGroupCoordinator": "randomize the submissions",
                "PermissionGroupJury": "see the evaluation results of the evaluations they have done",
                "PermissionGroupLead": "delete a campaign"
            },
            "x-enum-varnames": [
                "PermissionGroupBanned",
                "PermissionGroupUSER",
                "PermissionGroupJury",
                "PermissionGroupCoordinator",
                "PermissionGroupLead",
                "PermissionGroupADMIN"
            ]
        },
        "consts.PermissionMap": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/consts.Permission"
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "models.Campaign": {
            "type": "object",
            "required": [
                "campaignType",
                "endDate",
                "language",
                "name",
                "startDate"
            ],
            "properties": {
                "archivedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "campaignId": {
                    "description": "A unique identifier for the campaign, it should be custom defined",
                    "type": "string"
                },
                "campaignType": {
                    "description": "The type of the campaign, it should be one of the CampaignType constants",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CampaignType"
                        }
                    ]
                },
                "createdAt": {
                    "description": "The time the campaign was created, it would be set automatically",
                    "type": "string"
                },
                "createdById": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "isPublic": {
                    "description": "Whether the campaign is shown in the public list",
                    "type": "boolean"
                },
                "language": {
                    "$ref": "#/definitions/consts.Language"
                },
                "latestRoundId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "project": {
                    "$ref": "#/definitions/models.Project"
                },
                "projectId": {
                    "type": "string"
                },
                "rounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Round"
                    }
                },
                "rules": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.RoundStatus"
                }
            }
        },
        "models.CampaignExtended": {
            "type": "object",
            "required": [
                "campaignType",
                "endDate",
                "language",
                "name",
                "startDate"
            ],
            "properties": {
                "archivedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "campaignId": {
                    "description": "A unique identifier for the campaign, it should be custom defined",
                    "type": "string"
                },
                "campaignType": {
                    "description": "The type of the campaign, it should be one of the CampaignType constants",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CampaignType"
                        }
                    ]
                },
                "coordinators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "description": "The time the campaign was created, it would be set automatically",
                    "type": "string"
                },
                "createdById": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "isPublic": {
                    "description": "Whether the campaign is shown in the public list",
                    "type": "boolean"
                },
                "language": {
                    "$ref": "#/definitions/consts.Language"
                },
                "latestRoundId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "project": {
                    "$ref": "#/definitions/models.Project"
                },
                "projectId": {
                    "type": "string"
                },
                "rounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Round"
                    }
                },
                "rules": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.RoundStatus"
                }
            }
        },
        "models.CampaignType": {
            "type": "string",
            "enum": [
                "commons",
                "wikipedia",
                "wikidata",
                "categorization",
                "reference"
            ],
            "x-enum-varnames": [
                "CampaignTypeCommons",
                "CampaignTypeWikipedia",
                "CampaignTypeWikidata",
                "CampaignTypeCategorization",
                "CampaignTypeReference"
            ]
        },
        "models.CampaignUpdateStatusRequest": {
            "type": "object",
            "properties": {
                "isArchived": {
                    "description": "The status of the campaign",
                    "type": "boolean"
                }
            }
        },
        "models.CategoryResponse": {
            "type": "object",
            "properties": {
                "added": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "executed": {
                    "description": "Whether the categories were added or removed successfully",
                    "type": "boolean"
                },
                "pageTitle": {
                    "description": "PageTitle is the title of the page where the categories were added or removed",
                    "type": "string"
                },
                "removed": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Evaluation": {
            "type": "object",
            "properties": {
                "assignedAt": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "distributionTaskId": {
                    "description": "Round              *Round         `json:\"-\" gorm:\"foreignKey:RoundID;constraint:OnUpdate:CASCADE,OnDelete:CASCADE\"`",
                    "type": "string"
                },
                "evaluatedAt": {
                    "type": "string"
                },
                "evaluationId": {
                    "type": "string"
                },
                "judgeId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "roundId": {
                    "type": "string"
                },
                "score": {
                    "$ref": "#/definitions/models.ScoreType"
                },
                "serial": {
                    "type": "integer"
                },
                "skipExpirationAt": {
                    "description": "SkipExpirationAt is the time when the skip request will expire",
                    "type": "string"
                },
                "submission": {
                    "$ref": "#/definitions/models.Submission"
                },
                "submissionId": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.EvaluationType"
                }
            }
        },
        "models.EvaluationResult": {
            "type": "object",
            "properties": {
                "averageScore": {
                    "type": "number"
                },
                "submissionCount": {
                    "type": "integer"
                }
            }
        },
        "models.EvaluationType": {
            "type": "string",
            "enum": [
                "ranking",
                "score",
                "binary"
            ],
            "x-enum-varnames": [
                "EvaluationTypeRanking",
                "EvaluationTypeScore",
                "EvaluationTypeBinary"
            ]
        },
        "models.MediaType": {
            "type": "string",
            "enum": [
                "ARTICLE",
                "BITMAP",
                "AUDIO",
                "VIDEO",
                "PDF"
            ],
            "x-enum-varnames": [
                "MediaTypeArticle",
                "MediaTypeImage",
                "MediaTypeAudio",
                "MediaTypeVideo",
                "MediaTypePDF"
            ]
        },
        "models.PageCategory": {
            "type": "object",
            "properties": {
                "fixed": {
                    "description": "Whether the category is fixed and cannot be removed",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the category, Without the namespace",
                    "type": "string"
                }
            }
        },
        "models.Project": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "createdById": {
                    "type": "string"
                },
                "logoUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "url": {
                    "description": "The URL of the project's website",
                    "type": "string"
                }
            }
        },
        "models.ProjectExtended": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "createdById": {
                    "type": "string"
                },
                "logoUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "projectLeads": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "url": {
                    "description": "The URL of the project's website",
                    "type": "string"
                }
            }
        },
        "models.ProjectRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "logoUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "projectLeads": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.ResponseList-models_Campaign": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Campaign"
                    }
                },
                "next": {
                    "type": "string"
                },
                "prev": {
                    "type": "string"
                }
            }
        },
        "models.ResponseList-models_Evaluation": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Evaluation"
                    }
                },
                "next": {
                    "type": "string"
                },
                "prev": {
                    "type": "string"
                }
            }
        },
        "models.ResponseList-models_EvaluationResult": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.EvaluationResult"
                    }
                },
                "next": {
                    "type": "string"
                },
                "prev": {
                    "type": "string"
                }
            }
        },
        "models.ResponseList-models_ProjectExtended": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProjectExtended"
                    }
                },
                "next": {
                    "type": "string"
                },
                "prev": {
                    "type": "string"
                }
            }
        },
        "models.ResponseList-models_Round": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Round"
                    }
                },
                "next": {
                    "type": "string"
                },
                "prev": {
                    "type": "string"
                }
            }
        },
        "models.ResponseList-models_Submission": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Submission"
                    }
                },
                "next": {
                    "type": "string"
                },
                "prev": {
                    "type": "string"
                }
            }
        },
        "models.ResponseList-models_SubmissionResult": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SubmissionResult"
                    }
                },
                "next": {
                    "type": "string"
                },
                "prev": {
                    "type": "string"
                }
            }
        },
        "models.ResponseSingle-consts_PermissionMap": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/consts.PermissionMap"
                }
            }
        },
        "models.ResponseSingle-models_Campaign": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Campaign"
                }
            }
        },
        "models.ResponseSingle-models_CampaignExtended": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.CampaignExtended"
                }
            }
        },
        "models.ResponseSingle-models_CategoryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.CategoryResponse"
                }
            }
        },
        "models.ResponseSingle-models_Evaluation": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Evaluation"
                }
            }
        },
        "models.ResponseSingle-models_Project": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Project"
                }
            }
        },
        "models.ResponseSingle-models_Role": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Role"
                }
            }
        },
        "models.ResponseSingle-models_Round": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Round"
                }
            }
        },
        "models.ResponseSingle-models_Submission": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Submission"
                }
            }
        },
        "models.ResponseSingle-models_SubmissionWithCategoryList": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.SubmissionWithCategoryList"
                }
            }
        },
        "models.ResponseSingle-models_Task": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Task"
                }
            }
        },
        "models.ResponseSingle-routes_RedirectResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/routes.RedirectResponse"
                }
            }
        },
        "models.ResponseSingle-routes_RoundDeletedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/routes.RoundDeletedResponse"
                }
            }
        },
        "models.ResponseSingle-services_TaskResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/services.TaskResponse"
                }
            }
        },
        "models.Role": {
            "type": "object",
            "properties": {
                "campaignId": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "permission": {
                    "$ref": "#/definitions/consts.PermissionGroup"
                },
                "projectId": {
                    "type": "string"
                },
                "roleId": {
                    "type": "string"
                },
                "roundId": {
                    "type": "string"
                },
                "targetProjectId": {
                    "type": "string"
                },
                "totalAssigned": {
                    "type": "integer"
                },
                "totalEvaluated": {
                    "type": "integer"
                },
                "totalScore": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/models.RoleType"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "models.RoleType": {
            "type": "string",
            "enum": [
                "admin",
                "projectLead",
                "coordinator",
                "jury",
                "participant"
            ],
            "x-enum-varnames": [
                "RoleTypeAdmin",
                "RoleTypeProjectLead",
                "RoleTypeCoordinator",
                "RoleTypeJury",
                "RoleTypeParticipant"
            ]
        },
        "models.Round": {
            "type": "object",
            "properties": {
                "allowJuryToParticipate": {
                    "type": "boolean"
                },
                "allowMultipleJudgement": {
                    "type": "boolean"
                },
                "allowedMediaTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaType"
                    }
                },
                "articleAllowCreations": {
                    "type": "boolean"
                },
                "articleAllowExpansions": {
                    "type": "boolean"
                },
                "articleMaximumSubmissionOfSameArticle": {
                    "type": "integer"
                },
                "articleMinimumAddedBytes": {
                    "type": "integer"
                },
                "articleMinimumAddedWords": {
                    "type": "integer"
                },
                "articleMinimumTotalBytes": {
                    "type": "integer"
                },
                "articleMinimumTotalWords": {
                    "type": "integer"
                },
                "audioMinimumDurationMilliseconds": {
                    "type": "integer"
                },
                "audioMinimumSizeBytes": {
                    "type": "integer"
                },
                "blacklist": {
                    "type": "string"
                },
                "campaignId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdById": {
                    "type": "string"
                },
                "dependsOnRoundId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "imageMinimumResolution": {
                    "type": "integer"
                },
                "imageMinimumSizeBytes": {
                    "type": "integer"
                },
                "isOpen": {
                    "type": "boolean"
                },
                "isPublicJury": {
                    "type": "boolean"
                },
                "jury": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "latestTaskId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "quorum": {
                    "type": "integer"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Role"
                    }
                },
                "roundId": {
                    "type": "string"
                },
                "secretBallot": {
                    "type": "boolean"
                },
                "serial": {
                    "type": "integer"
                },
                "startDate": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.RoundStatus"
                },
                "totalAssignments": {
                    "type": "integer"
                },
                "totalEvaluatedAssignments": {
                    "type": "integer"
                },
                "totalEvaluatedSubmissions": {
                    "type": "integer"
                },
                "totalSubmissions": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/models.EvaluationType"
                },
                "videoMinimumDurationMilliseconds": {
                    "type": "integer"
                },
                "videoMinimumResolution": {
                    "type": "integer"
                },
                "videoMinimumSizeBytes": {
                    "type": "integer"
                }
            }
        },
        "models.RoundStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "IMPORTING",
                "DISTRIBUTING",
                "EVALUATING",
                "REJECTED",
                "CANCELLED",
                "PAUSED",
                "SCHEDULED",
                "ACTIVE",
                "COMPLETED"
            ],
            "x-enum-varnames": [
                "RoundStatusPending",
                "RoundStatusImporting",
                "RoundStatusDistributing",
                "RoundStatusEvaluating",
                "RoundStatusRejected",
                "RoundStatusCancelled",
                "RoundStatusPaused",
                "RoundStatusScheduled",
                "RoundStatusActive",
                "RoundStatusCompleted"
            ]
        },
        "models.ScoreType": {
            "type": "number",
            "enum": [
                100
            ],
            "x-enum-varnames": [
                "MAXIMUM_EVALUATION_SCORE"
            ]
        },
        "models.SortOrder": {
            "type": "string",
            "enum": [
                "asc",
                "desc"
            ],
            "x-enum-varnames": [
                "SortOrderAsc",
                "SortOrderDesc"
            ]
        },
        "models.Submission": {
            "type": "object",
            "properties": {
                "assignmentCount": {
                    "description": "The number of times the submission has been assigned to the juries",
                    "type": "integer"
                },
                "author": {
                    "description": "The Actual Author in the Wikimedia",
                    "type": "string"
                },
                "bitrate": {
                    "description": "in kbps",
                    "type": "integer"
                },
                "campaignId": {
                    "type": "string"
                },
                "createdAtServer": {
                    "type": "string"
                },
                "creditHTML": {
                    "type": "string"
                },
                "currentRoundId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "distributionTaskId": {
                    "type": "string"
                },
                "duration": {
                    "description": "in milliseconds",
                    "type": "integer"
                },
                "evaluationCount": {
                    "description": "The number of times the submission has been evaluated by the juries",
                    "type": "integer"
                },
                "height": {
                    "type": "integer"
                },
                "importTaskId": {
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "mediatype": {
                    "$ref": "#/definitions/models.MediaType"
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "pageId": {
                    "type": "integer"
                },
                "participantId": {
                    "type": "string"
                },
                "resolution": {
                    "type": "integer"
                },
                "score": {
                    "description": "The Average Score of the submission",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ScoreType"
                        }
                    ]
                },
                "size": {
                    "description": "in bytes",
                    "type": "integer"
                },
                "submissionId": {
                    "type": "string"
                },
                "submittedAt": {
                    "type": "string"
                },
                "submittedById": {
                    "description": "The User who submitted the article on behalf of the participant",
                    "type": "string"
                },
                "thumbheight": {
                    "type": "integer"
                },
                "thumburl": {
                    "type": "string"
                },
                "thumbwidth": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "models.SubmissionResult": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "juryCount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "score": {
                    "$ref": "#/definitions/models.ScoreType"
                },
                "submissionId": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.MediaType"
                }
            }
        },
        "models.SubmissionWithCategoryList": {
            "type": "object",
            "properties": {
                "assignmentCount": {
                    "description": "The number of times the submission has been assigned to the juries",
                    "type": "integer"
                },
                "author": {
                    "description": "The Actual Author in the Wikimedia",
                    "type": "string"
                },
                "bitrate": {
                    "description": "in kbps",
                    "type": "integer"
                },
                "campaignId": {
                    "type": "string"
                },
                "categories": {
                    "description": "List of categories associated with the submission",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PageCategory"
                    }
                },
                "createdAtServer": {
                    "type": "string"
                },
                "creditHTML": {
                    "type": "string"
                },
                "currentRoundId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "distributionTaskId": {
                    "type": "string"
                },
                "duration": {
                    "description": "in milliseconds",
                    "type": "integer"
                },
                "evaluationCount": {
                    "description": "The number of times the submission has been evaluated by the juries",
                    "type": "integer"
                },
                "height": {
                    "type": "integer"
                },
                "importTaskId": {
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "mediatype": {
                    "$ref": "#/definitions/models.MediaType"
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "pageId": {
                    "type": "integer"
                },
                "participantId": {
                    "type": "string"
                },
                "resolution": {
                    "type": "integer"
                },
                "score": {
                    "description": "The Average Score of the submission",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ScoreType"
                        }
                    ]
                },
                "size": {
                    "description": "in bytes",
                    "type": "integer"
                },
                "submissionId": {
                    "type": "string"
                },
                "submittedAt": {
                    "type": "string"
                },
                "submittedById": {
                    "description": "The User who submitted the article on behalf of the participant",
                    "type": "string"
                },
                "thumbheight": {
                    "type": "integer"
                },
                "thumburl": {
                    "type": "string"
                },
                "thumbwidth": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "models.Task": {
            "type": "object",
            "properties": {
                "campaignId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdById": {
                    "type": "string"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "failedCount": {
                    "type": "integer"
                },
                "failedIds": {
                    "type": "object"
                },
                "remainingCount": {
                    "type": "integer"
                },
                "roundId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.TaskStatus"
                },
                "successCount": {
                    "type": "integer"
                },
                "taskData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TaskData"
                    }
                },
                "taskId": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.TaskType"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "models.TaskData": {
            "type": "object",
            "properties": {
                "dataId": {
                    "type": "string"
                },
                "isOutput": {
                    "description": "Whether this data is an input or output of the task\nFor example, if the task is to import data from commons, then the input would be the\ncommons data and the output would be the rejection reason",
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "taskId": {
                    "description": "The task ID that this data belongs to",
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.TaskStatus": {
            "type": "string",
            "enum": [
                "pending",
                "running",
                "success",
                "failed"
            ],
            "x-enum-varnames": [
                "TaskStatusPending",
                "TaskStatusRunning",
                "TaskStatusSuccess",
                "TaskStatusFailed"
            ]
        },
        "models.TaskType": {
            "type": "string",
            "enum": [
                "submissions.import.commons",
                "submissions.import.previous",
                "submissions.import.csv",
                "assignments.distribute",
                "assignments.randomize"
            ],
            "x-enum-varnames": [
                "TaskTypeImportFromCommons",
                "TaskTypeImportFromPreviousRound",
                "TaskTypeImportFromCSV",
                "TaskTypeDistributeEvaluations",
                "TaskTypeRandomizeAssignments"
            ]
        },
        "multipart.FileHeader": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/textproto.MIMEHeader"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "routes.ConfirmSubmitCategory": {
            "type": "object",
            "required": [
                "categories",
                "summary"
            ],
            "properties": {
                "categories": {
                    "description": "The Categories you want to set for the submission.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "summary": {
                    "description": "The Summary to be added when your edit is submitted.\nThis is a required field.",
                    "type": "string"
                }
            }
        },
        "routes.ImportFromCampWizV1Request": {
            "type": "object",
            "required": [
                "fromCampaignId",
                "fromFile",
                "toRoundId"
            ],
            "properties": {
                "fromCampaignId": {
                    "description": "From Which Campaign ID to import",
                    "type": "integer"
                },
                "fromFile": {
                    "description": "The path to the CampWiz V1 database file, must be accessible by the server",
                    "type": "string"
                },
                "toRoundId": {
                    "description": "To which round in our system to import the images",
                    "type": "string"
                }
            }
        },
        "routes.ImportFromFountainRequest": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "routes.RedirectResponse": {
            "type": "object",
            "properties": {
                "redirect": {
                    "description": "Redirect is the URL to redirect to",
                    "type": "string"
                }
            }
        },
        "routes.RoundDeletedResponse": {
            "type": "object",
            "properties": {
                "roundId": {
                    "type": "string"
                }
            }
        },
        "routes.UpdateStatusRequest": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/models.RoundStatus"
                }
            }
        },
        "services.CampaignCreateRequest": {
            "type": "object",
            "required": [
                "campaignType",
                "endDate",
                "language",
                "name",
                "startDate"
            ],
            "properties": {
                "campaignType": {
                    "description": "The type of the campaign, it should be one of the CampaignType constants",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CampaignType"
                        }
                    ]
                },
                "coordinators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "isPublic": {
                    "description": "Whether the campaign is shown in the public list",
                    "type": "boolean"
                },
                "language": {
                    "$ref": "#/definitions/consts.Language"
                },
                "name": {
                    "type": "string"
                },
                "organizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "projectId": {
                    "type": "string"
                },
                "rules": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.RoundStatus"
                }
            }
        },
        "services.CampaignUpdateRequest": {
            "type": "object",
            "required": [
                "campaignType",
                "endDate",
                "language",
                "name",
                "startDate"
            ],
            "properties": {
                "campaignType": {
                    "description": "The type of the campaign, it should be one of the CampaignType constants",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CampaignType"
                        }
                    ]
                },
                "coordinators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "isPublic": {
                    "description": "Whether the campaign is shown in the public list",
                    "type": "boolean"
                },
                "language": {
                    "$ref": "#/definitions/consts.Language"
                },
                "name": {
                    "type": "string"
                },
                "organizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "projectId": {
                    "type": "string"
                },
                "rules": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.RoundStatus"
                }
            }
        },
        "services.DistributionRequest": {
            "type": "object",
            "properties": {
                "juries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sourceJuries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "services.EvaluationRequest": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "evaluationId": {
                    "type": "string"
                },
                "score": {
                    "$ref": "#/definitions/models.ScoreType"
                },
                "submissionId": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                }
            }
        },
        "services.ImportFromCommonsPayload": {
            "type": "object",
            "required": [
                "categories"
            ],
            "properties": {
                "categories": {
                    "description": "Categories from which images will be fetched",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "services.ImportFromPreviousRoundPayload": {
            "type": "object",
            "required": [
                "roundId",
                "scores"
            ],
            "properties": {
                "roundId": {
                    "description": "RoundID from which images will be fetched",
                    "type": "string"
                },
                "scores": {
                    "description": "Scores of the images to be fetched",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ScoreType"
                    }
                }
            }
        },
        "services.RoundRequest": {
            "type": "object",
            "properties": {
                "allowJuryToParticipate": {
                    "type": "boolean"
                },
                "allowMultipleJudgement": {
                    "type": "boolean"
                },
                "allowedMediaTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MediaType"
                    }
                },
                "articleAllowCreations": {
                    "type": "boolean"
                },
                "articleAllowExpansions": {
                    "type": "boolean"
                },
                "articleMaximumSubmissionOfSameArticle": {
                    "type": "integer"
                },
                "articleMinimumAddedBytes": {
                    "type": "integer"
                },
                "articleMinimumAddedWords": {
                    "type": "integer"
                },
                "articleMinimumTotalBytes": {
                    "type": "integer"
                },
                "articleMinimumTotalWords": {
                    "type": "integer"
                },
                "audioMinimumDurationMilliseconds": {
                    "type": "integer"
                },
                "audioMinimumSizeBytes": {
                    "type": "integer"
                },
                "blacklist": {
                    "type": "string"
                },
                "campaignId": {
                    "type": "string"
                },
                "dependsOnRoundId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "imageMinimumResolution": {
                    "type": "integer"
                },
                "imageMinimumSizeBytes": {
                    "type": "integer"
                },
                "isOpen": {
                    "type": "boolean"
                },
                "isPublicJury": {
                    "type": "boolean"
                },
                "jury": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "quorum": {
                    "type": "integer"
                },
                "secretBallot": {
                    "type": "boolean"
                },
                "serial": {
                    "type": "integer"
                },
                "startDate": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.EvaluationType"
                },
                "videoMinimumDurationMilliseconds": {
                    "type": "integer"
                },
                "videoMinimumResolution": {
                    "type": "integer"
                },
                "videoMinimumSizeBytes": {
                    "type": "integer"
                }
            }
        },
        "services.TaskResponse": {
            "type": "object",
            "properties": {
                "campaignId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdById": {
                    "type": "string"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "failedCount": {
                    "type": "integer"
                },
                "failedIds": {
                    "type": "object"
                },
                "remainingCount": {
                    "type": "integer"
                },
                "roundId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.TaskStatus"
                },
                "successCount": {
                    "type": "integer"
                },
                "taskData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TaskData"
                    }
                },
                "taskId": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.TaskType"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "textproto.MIMEHeader": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Authentication cookie for the API. It would be set by the server when the user logs in.",
            "type": "apiKey",
            "name": "c-auth",
            "in": "cookie"
        }
    }
}