// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: models/taskmanager.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Importer_ImportFromCommonsCategory_FullMethodName = "/models.Importer/ImportFromCommonsCategory"
	Importer_ImportFromPreviousRound_FullMethodName   = "/models.Importer/ImportFromPreviousRound"
)

// ImporterClient is the client API for Importer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImporterClient interface {
	ImportFromCommonsCategory(ctx context.Context, in *ImportFromCommonsCategoryRequest, opts ...grpc.CallOption) (*ImportResponse, error)
	ImportFromPreviousRound(ctx context.Context, in *ImportFromPreviousRoundRequest, opts ...grpc.CallOption) (*ImportResponse, error)
}

type importerClient struct {
	cc grpc.ClientConnInterface
}

func NewImporterClient(cc grpc.ClientConnInterface) ImporterClient {
	return &importerClient{cc}
}

func (c *importerClient) ImportFromCommonsCategory(ctx context.Context, in *ImportFromCommonsCategoryRequest, opts ...grpc.CallOption) (*ImportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportResponse)
	err := c.cc.Invoke(ctx, Importer_ImportFromCommonsCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importerClient) ImportFromPreviousRound(ctx context.Context, in *ImportFromPreviousRoundRequest, opts ...grpc.CallOption) (*ImportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportResponse)
	err := c.cc.Invoke(ctx, Importer_ImportFromPreviousRound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImporterServer is the server API for Importer service.
// All implementations must embed UnimplementedImporterServer
// for forward compatibility.
type ImporterServer interface {
	ImportFromCommonsCategory(context.Context, *ImportFromCommonsCategoryRequest) (*ImportResponse, error)
	ImportFromPreviousRound(context.Context, *ImportFromPreviousRoundRequest) (*ImportResponse, error)
	mustEmbedUnimplementedImporterServer()
}

// UnimplementedImporterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImporterServer struct{}

func (UnimplementedImporterServer) ImportFromCommonsCategory(context.Context, *ImportFromCommonsCategoryRequest) (*ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportFromCommonsCategory not implemented")
}
func (UnimplementedImporterServer) ImportFromPreviousRound(context.Context, *ImportFromPreviousRoundRequest) (*ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportFromPreviousRound not implemented")
}
func (UnimplementedImporterServer) mustEmbedUnimplementedImporterServer() {}
func (UnimplementedImporterServer) testEmbeddedByValue()                  {}

// UnsafeImporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImporterServer will
// result in compilation errors.
type UnsafeImporterServer interface {
	mustEmbedUnimplementedImporterServer()
}

func RegisterImporterServer(s grpc.ServiceRegistrar, srv ImporterServer) {
	// If the following call pancis, it indicates UnimplementedImporterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Importer_ServiceDesc, srv)
}

func _Importer_ImportFromCommonsCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportFromCommonsCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).ImportFromCommonsCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Importer_ImportFromCommonsCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).ImportFromCommonsCategory(ctx, req.(*ImportFromCommonsCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Importer_ImportFromPreviousRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportFromPreviousRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).ImportFromPreviousRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Importer_ImportFromPreviousRound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).ImportFromPreviousRound(ctx, req.(*ImportFromPreviousRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Importer_ServiceDesc is the grpc.ServiceDesc for Importer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Importer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.Importer",
	HandlerType: (*ImporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportFromCommonsCategory",
			Handler:    _Importer_ImportFromCommonsCategory_Handler,
		},
		{
			MethodName: "ImportFromPreviousRound",
			Handler:    _Importer_ImportFromPreviousRound_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models/taskmanager.proto",
}

const (
	Distributor_DistributeWithRoundRobin_FullMethodName = "/models.Distributor/DistributeWithRoundRobin"
)

// DistributorClient is the client API for Distributor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributorClient interface {
	// DistributeWithRoundRobin distributes the assignments to different juries in a round robin fashion
	DistributeWithRoundRobin(ctx context.Context, in *DistributeWithRoundRobinRequest, opts ...grpc.CallOption) (*DistributeWithRoundRobinResponse, error)
}

type distributorClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributorClient(cc grpc.ClientConnInterface) DistributorClient {
	return &distributorClient{cc}
}

func (c *distributorClient) DistributeWithRoundRobin(ctx context.Context, in *DistributeWithRoundRobinRequest, opts ...grpc.CallOption) (*DistributeWithRoundRobinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistributeWithRoundRobinResponse)
	err := c.cc.Invoke(ctx, Distributor_DistributeWithRoundRobin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributorServer is the server API for Distributor service.
// All implementations must embed UnimplementedDistributorServer
// for forward compatibility.
type DistributorServer interface {
	// DistributeWithRoundRobin distributes the assignments to different juries in a round robin fashion
	DistributeWithRoundRobin(context.Context, *DistributeWithRoundRobinRequest) (*DistributeWithRoundRobinResponse, error)
	mustEmbedUnimplementedDistributorServer()
}

// UnimplementedDistributorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDistributorServer struct{}

func (UnimplementedDistributorServer) DistributeWithRoundRobin(context.Context, *DistributeWithRoundRobinRequest) (*DistributeWithRoundRobinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeWithRoundRobin not implemented")
}
func (UnimplementedDistributorServer) mustEmbedUnimplementedDistributorServer() {}
func (UnimplementedDistributorServer) testEmbeddedByValue()                     {}

// UnsafeDistributorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributorServer will
// result in compilation errors.
type UnsafeDistributorServer interface {
	mustEmbedUnimplementedDistributorServer()
}

func RegisterDistributorServer(s grpc.ServiceRegistrar, srv DistributorServer) {
	// If the following call pancis, it indicates UnimplementedDistributorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Distributor_ServiceDesc, srv)
}

func _Distributor_DistributeWithRoundRobin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeWithRoundRobinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServer).DistributeWithRoundRobin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distributor_DistributeWithRoundRobin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServer).DistributeWithRoundRobin(ctx, req.(*DistributeWithRoundRobinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Distributor_ServiceDesc is the grpc.ServiceDesc for Distributor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Distributor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.Distributor",
	HandlerType: (*DistributorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DistributeWithRoundRobin",
			Handler:    _Distributor_DistributeWithRoundRobin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models/taskmanager.proto",
}
