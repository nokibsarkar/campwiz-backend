// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nokib/campwiz/models"
)

func newJuryStatistics(db *gorm.DB, opts ...gen.DOOption) juryStatistics {
	_juryStatistics := juryStatistics{}

	_juryStatistics.juryStatisticsDo.UseDB(db, opts...)
	_juryStatistics.juryStatisticsDo.UseModel(&models.JuryStatistics{})

	tableName := _juryStatistics.juryStatisticsDo.TableName()
	_juryStatistics.ALL = field.NewAsterisk(tableName)
	_juryStatistics.JudgeID = field.NewString(tableName, "judge_id")
	_juryStatistics.TotalAssigned = field.NewInt(tableName, "total_assigned")
	_juryStatistics.TotalEvaluated = field.NewInt(tableName, "total_evaluated")

	_juryStatistics.fillFieldMap()

	return _juryStatistics
}

type juryStatistics struct {
	juryStatisticsDo

	ALL            field.Asterisk
	JudgeID        field.String
	TotalAssigned  field.Int
	TotalEvaluated field.Int

	fieldMap map[string]field.Expr
}

func (j juryStatistics) Table(newTableName string) *juryStatistics {
	j.juryStatisticsDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j juryStatistics) As(alias string) *juryStatistics {
	j.juryStatisticsDo.DO = *(j.juryStatisticsDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *juryStatistics) updateTableName(table string) *juryStatistics {
	j.ALL = field.NewAsterisk(table)
	j.JudgeID = field.NewString(table, "judge_id")
	j.TotalAssigned = field.NewInt(table, "total_assigned")
	j.TotalEvaluated = field.NewInt(table, "total_evaluated")

	j.fillFieldMap()

	return j
}

func (j *juryStatistics) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *juryStatistics) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 3)
	j.fieldMap["judge_id"] = j.JudgeID
	j.fieldMap["total_assigned"] = j.TotalAssigned
	j.fieldMap["total_evaluated"] = j.TotalEvaluated
}

func (j juryStatistics) clone(db *gorm.DB) juryStatistics {
	j.juryStatisticsDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j juryStatistics) replaceDB(db *gorm.DB) juryStatistics {
	j.juryStatisticsDo.ReplaceDB(db)
	return j
}

type juryStatisticsDo struct{ gen.DO }

type IJuryStatisticsDo interface {
	gen.SubQuery
	Debug() IJuryStatisticsDo
	WithContext(ctx context.Context) IJuryStatisticsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IJuryStatisticsDo
	WriteDB() IJuryStatisticsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IJuryStatisticsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IJuryStatisticsDo
	Not(conds ...gen.Condition) IJuryStatisticsDo
	Or(conds ...gen.Condition) IJuryStatisticsDo
	Select(conds ...field.Expr) IJuryStatisticsDo
	Where(conds ...gen.Condition) IJuryStatisticsDo
	Order(conds ...field.Expr) IJuryStatisticsDo
	Distinct(cols ...field.Expr) IJuryStatisticsDo
	Omit(cols ...field.Expr) IJuryStatisticsDo
	Join(table schema.Tabler, on ...field.Expr) IJuryStatisticsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IJuryStatisticsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IJuryStatisticsDo
	Group(cols ...field.Expr) IJuryStatisticsDo
	Having(conds ...gen.Condition) IJuryStatisticsDo
	Limit(limit int) IJuryStatisticsDo
	Offset(offset int) IJuryStatisticsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IJuryStatisticsDo
	Unscoped() IJuryStatisticsDo
	Create(values ...*models.JuryStatistics) error
	CreateInBatches(values []*models.JuryStatistics, batchSize int) error
	Save(values ...*models.JuryStatistics) error
	First() (*models.JuryStatistics, error)
	Take() (*models.JuryStatistics, error)
	Last() (*models.JuryStatistics, error)
	Find() ([]*models.JuryStatistics, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.JuryStatistics, err error)
	FindInBatches(result *[]*models.JuryStatistics, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.JuryStatistics) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IJuryStatisticsDo
	Assign(attrs ...field.AssignExpr) IJuryStatisticsDo
	Joins(fields ...field.RelationField) IJuryStatisticsDo
	Preload(fields ...field.RelationField) IJuryStatisticsDo
	FirstOrInit() (*models.JuryStatistics, error)
	FirstOrCreate() (*models.JuryStatistics, error)
	FindByPage(offset int, limit int) (result []*models.JuryStatistics, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IJuryStatisticsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetJuryStatistics(roundID string) (result []models.JuryStatistics, err error)
	TriggerByRoundID(round_id string) (err error)
}

// SELECT COUNT(*) AS TotalAssigned, SUM(IF(evaluated_at IS NOT NULL, 1, 0)) AS TotalEvaluated, judge_id FROM `evaluations` WHERE round_id = @roundID AND `judge_id` IS NOT NULL GROUP  BY judge_id
func (j juryStatisticsDo) GetJuryStatistics(roundID string) (result []models.JuryStatistics, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, roundID)
	generateSQL.WriteString("SELECT COUNT(*) AS TotalAssigned, SUM(IF(evaluated_at IS NOT NULL, 1, 0)) AS TotalEvaluated, judge_id FROM `evaluations` WHERE round_id = ? AND `judge_id` IS NOT NULL GROUP BY judge_id ")

	var executeSQL *gorm.DB
	executeSQL = j.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE roles AS jury join (
// select r.role_id as judge_id, ifnull(d.c, 0) as c, ifnull(d.ev,0) as ev from roles r left join ( SELECT judge_id, COUNT(*) AS c,
// SUM(evaluated_at IS NOT NULL) AS ev FROM evaluations WHERE round_id = @round_id GROUP BY judge_id ) d on r.role_id=d.judge_id  where r.round_id=@round_id
// ) as k on jury.role_id = k.judge_id SET jury.total_evaluated = k.ev, jury.total_assigned = k.c WHERE jury.round_id = @round_id AND jury.type = 'jury'
func (j juryStatisticsDo) TriggerByRoundID(round_id string) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, round_id)
	params = append(params, round_id)
	params = append(params, round_id)
	generateSQL.WriteString("UPDATE roles AS jury join ( select r.role_id as judge_id, ifnull(d.c, 0) as c, ifnull(d.ev,0) as ev from roles r left join ( SELECT judge_id, COUNT(*) AS c, SUM(evaluated_at IS NOT NULL) AS ev FROM evaluations WHERE round_id = ? GROUP BY judge_id ) d on r.role_id=d.judge_id where r.round_id=? ) as k on jury.role_id = k.judge_id SET jury.total_evaluated = k.ev, jury.total_assigned = k.c WHERE jury.round_id = ? AND jury.type = 'jury' ")

	var executeSQL *gorm.DB
	executeSQL = j.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (j juryStatisticsDo) Debug() IJuryStatisticsDo {
	return j.withDO(j.DO.Debug())
}

func (j juryStatisticsDo) WithContext(ctx context.Context) IJuryStatisticsDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j juryStatisticsDo) ReadDB() IJuryStatisticsDo {
	return j.Clauses(dbresolver.Read)
}

func (j juryStatisticsDo) WriteDB() IJuryStatisticsDo {
	return j.Clauses(dbresolver.Write)
}

func (j juryStatisticsDo) Session(config *gorm.Session) IJuryStatisticsDo {
	return j.withDO(j.DO.Session(config))
}

func (j juryStatisticsDo) Clauses(conds ...clause.Expression) IJuryStatisticsDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j juryStatisticsDo) Returning(value interface{}, columns ...string) IJuryStatisticsDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j juryStatisticsDo) Not(conds ...gen.Condition) IJuryStatisticsDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j juryStatisticsDo) Or(conds ...gen.Condition) IJuryStatisticsDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j juryStatisticsDo) Select(conds ...field.Expr) IJuryStatisticsDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j juryStatisticsDo) Where(conds ...gen.Condition) IJuryStatisticsDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j juryStatisticsDo) Order(conds ...field.Expr) IJuryStatisticsDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j juryStatisticsDo) Distinct(cols ...field.Expr) IJuryStatisticsDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j juryStatisticsDo) Omit(cols ...field.Expr) IJuryStatisticsDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j juryStatisticsDo) Join(table schema.Tabler, on ...field.Expr) IJuryStatisticsDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j juryStatisticsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IJuryStatisticsDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j juryStatisticsDo) RightJoin(table schema.Tabler, on ...field.Expr) IJuryStatisticsDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j juryStatisticsDo) Group(cols ...field.Expr) IJuryStatisticsDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j juryStatisticsDo) Having(conds ...gen.Condition) IJuryStatisticsDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j juryStatisticsDo) Limit(limit int) IJuryStatisticsDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j juryStatisticsDo) Offset(offset int) IJuryStatisticsDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j juryStatisticsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IJuryStatisticsDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j juryStatisticsDo) Unscoped() IJuryStatisticsDo {
	return j.withDO(j.DO.Unscoped())
}

func (j juryStatisticsDo) Create(values ...*models.JuryStatistics) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j juryStatisticsDo) CreateInBatches(values []*models.JuryStatistics, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j juryStatisticsDo) Save(values ...*models.JuryStatistics) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j juryStatisticsDo) First() (*models.JuryStatistics, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.JuryStatistics), nil
	}
}

func (j juryStatisticsDo) Take() (*models.JuryStatistics, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.JuryStatistics), nil
	}
}

func (j juryStatisticsDo) Last() (*models.JuryStatistics, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.JuryStatistics), nil
	}
}

func (j juryStatisticsDo) Find() ([]*models.JuryStatistics, error) {
	result, err := j.DO.Find()
	return result.([]*models.JuryStatistics), err
}

func (j juryStatisticsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.JuryStatistics, err error) {
	buf := make([]*models.JuryStatistics, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j juryStatisticsDo) FindInBatches(result *[]*models.JuryStatistics, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j juryStatisticsDo) Attrs(attrs ...field.AssignExpr) IJuryStatisticsDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j juryStatisticsDo) Assign(attrs ...field.AssignExpr) IJuryStatisticsDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j juryStatisticsDo) Joins(fields ...field.RelationField) IJuryStatisticsDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j juryStatisticsDo) Preload(fields ...field.RelationField) IJuryStatisticsDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j juryStatisticsDo) FirstOrInit() (*models.JuryStatistics, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.JuryStatistics), nil
	}
}

func (j juryStatisticsDo) FirstOrCreate() (*models.JuryStatistics, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.JuryStatistics), nil
	}
}

func (j juryStatisticsDo) FindByPage(offset int, limit int) (result []*models.JuryStatistics, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j juryStatisticsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j juryStatisticsDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j juryStatisticsDo) Delete(models ...*models.JuryStatistics) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *juryStatisticsDo) withDO(do gen.Dao) *juryStatisticsDo {
	j.DO = *do.(*gen.DO)
	return j
}
