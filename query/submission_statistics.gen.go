// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nokib/campwiz/models"
)

func newSubmissionStatistics(db *gorm.DB, opts ...gen.DOOption) submissionStatistics {
	_submissionStatistics := submissionStatistics{}

	_submissionStatistics.submissionStatisticsDo.UseDB(db, opts...)
	_submissionStatistics.submissionStatisticsDo.UseModel(&models.SubmissionStatistics{})

	tableName := _submissionStatistics.submissionStatisticsDo.TableName()
	_submissionStatistics.ALL = field.NewAsterisk(tableName)
	_submissionStatistics.SubmissionID = field.NewString(tableName, "submission_id")
	_submissionStatistics.AssignmentCount = field.NewInt(tableName, "assignment_count")
	_submissionStatistics.EvaluationCount = field.NewInt(tableName, "evaluation_count")

	_submissionStatistics.fillFieldMap()

	return _submissionStatistics
}

type submissionStatistics struct {
	submissionStatisticsDo

	ALL             field.Asterisk
	SubmissionID    field.String
	AssignmentCount field.Int
	EvaluationCount field.Int

	fieldMap map[string]field.Expr
}

func (s submissionStatistics) Table(newTableName string) *submissionStatistics {
	s.submissionStatisticsDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s submissionStatistics) As(alias string) *submissionStatistics {
	s.submissionStatisticsDo.DO = *(s.submissionStatisticsDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *submissionStatistics) updateTableName(table string) *submissionStatistics {
	s.ALL = field.NewAsterisk(table)
	s.SubmissionID = field.NewString(table, "submission_id")
	s.AssignmentCount = field.NewInt(table, "assignment_count")
	s.EvaluationCount = field.NewInt(table, "evaluation_count")

	s.fillFieldMap()

	return s
}

func (s *submissionStatistics) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *submissionStatistics) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["submission_id"] = s.SubmissionID
	s.fieldMap["assignment_count"] = s.AssignmentCount
	s.fieldMap["evaluation_count"] = s.EvaluationCount
}

func (s submissionStatistics) clone(db *gorm.DB) submissionStatistics {
	s.submissionStatisticsDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s submissionStatistics) replaceDB(db *gorm.DB) submissionStatistics {
	s.submissionStatisticsDo.ReplaceDB(db)
	return s
}

type submissionStatisticsDo struct{ gen.DO }

type ISubmissionStatisticsDo interface {
	gen.SubQuery
	Debug() ISubmissionStatisticsDo
	WithContext(ctx context.Context) ISubmissionStatisticsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubmissionStatisticsDo
	WriteDB() ISubmissionStatisticsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubmissionStatisticsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubmissionStatisticsDo
	Not(conds ...gen.Condition) ISubmissionStatisticsDo
	Or(conds ...gen.Condition) ISubmissionStatisticsDo
	Select(conds ...field.Expr) ISubmissionStatisticsDo
	Where(conds ...gen.Condition) ISubmissionStatisticsDo
	Order(conds ...field.Expr) ISubmissionStatisticsDo
	Distinct(cols ...field.Expr) ISubmissionStatisticsDo
	Omit(cols ...field.Expr) ISubmissionStatisticsDo
	Join(table schema.Tabler, on ...field.Expr) ISubmissionStatisticsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubmissionStatisticsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubmissionStatisticsDo
	Group(cols ...field.Expr) ISubmissionStatisticsDo
	Having(conds ...gen.Condition) ISubmissionStatisticsDo
	Limit(limit int) ISubmissionStatisticsDo
	Offset(offset int) ISubmissionStatisticsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubmissionStatisticsDo
	Unscoped() ISubmissionStatisticsDo
	Create(values ...*models.SubmissionStatistics) error
	CreateInBatches(values []*models.SubmissionStatistics, batchSize int) error
	Save(values ...*models.SubmissionStatistics) error
	First() (*models.SubmissionStatistics, error)
	Take() (*models.SubmissionStatistics, error)
	Last() (*models.SubmissionStatistics, error)
	Find() ([]*models.SubmissionStatistics, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SubmissionStatistics, err error)
	FindInBatches(result *[]*models.SubmissionStatistics, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.SubmissionStatistics) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubmissionStatisticsDo
	Assign(attrs ...field.AssignExpr) ISubmissionStatisticsDo
	Joins(fields ...field.RelationField) ISubmissionStatisticsDo
	Preload(fields ...field.RelationField) ISubmissionStatisticsDo
	FirstOrInit() (*models.SubmissionStatistics, error)
	FirstOrCreate() (*models.SubmissionStatistics, error)
	FindByPage(offset int, limit int) (result []*models.SubmissionStatistics, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubmissionStatisticsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FetchByRoundID(round_id string) (result []models.SubmissionStatistics, err error)
	UpdateBySubmissionIds(submissionIds []string) (rowsAffected int64, err error)
}

// SELECT COUNT(*) AS `AssignmentCount`, SUM(`score` IS NOT NULL) AS EvaluationCount, `submission_id`  FROM `evaluations`  WHERE `round_id` = @round_id GROUP BY `submission_id`
func (s submissionStatisticsDo) FetchByRoundID(round_id string) (result []models.SubmissionStatistics, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, round_id)
	generateSQL.WriteString("SELECT COUNT(*) AS `AssignmentCount`, SUM(`score` IS NOT NULL) AS EvaluationCount, `submission_id` FROM `evaluations` WHERE `round_id` = ? GROUP BY `submission_id` ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE `submissions` JOIN (SELECT COUNT(`evaluations`.`evaluation_id`) AS `AssignmentCount`, SUM(`evaluations`.`score` IS NOT NULL) AS `EvaluationCount`,`evaluations`.`submission_id` FROM `evaluations` WHERE  `evaluations`.submission_id IN (@submissionIds) GROUP BY `evaluations`.`submission_id`) AS `e` ON `submissions`.`submission_id` = `e`.`submission_id` SET `submissions`.`assignment_count` = `e`.`AssignmentCount`, `submissions`.`evaluation_count` = `e`.`EvaluationCount`;
func (s submissionStatisticsDo) UpdateBySubmissionIds(submissionIds []string) (rowsAffected int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, submissionIds)
	generateSQL.WriteString("UPDATE `submissions` JOIN (SELECT COUNT(`evaluations`.`evaluation_id`) AS `AssignmentCount`, SUM(`evaluations`.`score` IS NOT NULL) AS `EvaluationCount`,`evaluations`.`submission_id` FROM `evaluations` WHERE `evaluations`.submission_id IN (?) GROUP BY `evaluations`.`submission_id`) AS `e` ON `submissions`.`submission_id` = `e`.`submission_id` SET `submissions`.`assignment_count` = `e`.`AssignmentCount`, `submissions`.`evaluation_count` = `e`.`EvaluationCount`; ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	rowsAffected = executeSQL.RowsAffected
	err = executeSQL.Error

	return
}

func (s submissionStatisticsDo) Debug() ISubmissionStatisticsDo {
	return s.withDO(s.DO.Debug())
}

func (s submissionStatisticsDo) WithContext(ctx context.Context) ISubmissionStatisticsDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s submissionStatisticsDo) ReadDB() ISubmissionStatisticsDo {
	return s.Clauses(dbresolver.Read)
}

func (s submissionStatisticsDo) WriteDB() ISubmissionStatisticsDo {
	return s.Clauses(dbresolver.Write)
}

func (s submissionStatisticsDo) Session(config *gorm.Session) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Session(config))
}

func (s submissionStatisticsDo) Clauses(conds ...clause.Expression) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s submissionStatisticsDo) Returning(value interface{}, columns ...string) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s submissionStatisticsDo) Not(conds ...gen.Condition) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s submissionStatisticsDo) Or(conds ...gen.Condition) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s submissionStatisticsDo) Select(conds ...field.Expr) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s submissionStatisticsDo) Where(conds ...gen.Condition) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s submissionStatisticsDo) Order(conds ...field.Expr) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s submissionStatisticsDo) Distinct(cols ...field.Expr) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s submissionStatisticsDo) Omit(cols ...field.Expr) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s submissionStatisticsDo) Join(table schema.Tabler, on ...field.Expr) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s submissionStatisticsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubmissionStatisticsDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s submissionStatisticsDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubmissionStatisticsDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s submissionStatisticsDo) Group(cols ...field.Expr) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s submissionStatisticsDo) Having(conds ...gen.Condition) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s submissionStatisticsDo) Limit(limit int) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s submissionStatisticsDo) Offset(offset int) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s submissionStatisticsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s submissionStatisticsDo) Unscoped() ISubmissionStatisticsDo {
	return s.withDO(s.DO.Unscoped())
}

func (s submissionStatisticsDo) Create(values ...*models.SubmissionStatistics) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s submissionStatisticsDo) CreateInBatches(values []*models.SubmissionStatistics, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s submissionStatisticsDo) Save(values ...*models.SubmissionStatistics) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s submissionStatisticsDo) First() (*models.SubmissionStatistics, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubmissionStatistics), nil
	}
}

func (s submissionStatisticsDo) Take() (*models.SubmissionStatistics, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubmissionStatistics), nil
	}
}

func (s submissionStatisticsDo) Last() (*models.SubmissionStatistics, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubmissionStatistics), nil
	}
}

func (s submissionStatisticsDo) Find() ([]*models.SubmissionStatistics, error) {
	result, err := s.DO.Find()
	return result.([]*models.SubmissionStatistics), err
}

func (s submissionStatisticsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SubmissionStatistics, err error) {
	buf := make([]*models.SubmissionStatistics, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s submissionStatisticsDo) FindInBatches(result *[]*models.SubmissionStatistics, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s submissionStatisticsDo) Attrs(attrs ...field.AssignExpr) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s submissionStatisticsDo) Assign(attrs ...field.AssignExpr) ISubmissionStatisticsDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s submissionStatisticsDo) Joins(fields ...field.RelationField) ISubmissionStatisticsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s submissionStatisticsDo) Preload(fields ...field.RelationField) ISubmissionStatisticsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s submissionStatisticsDo) FirstOrInit() (*models.SubmissionStatistics, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubmissionStatistics), nil
	}
}

func (s submissionStatisticsDo) FirstOrCreate() (*models.SubmissionStatistics, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubmissionStatistics), nil
	}
}

func (s submissionStatisticsDo) FindByPage(offset int, limit int) (result []*models.SubmissionStatistics, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s submissionStatisticsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s submissionStatisticsDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s submissionStatisticsDo) Delete(models ...*models.SubmissionStatistics) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *submissionStatisticsDo) withDO(do gen.Dao) *submissionStatisticsDo {
	s.DO = *do.(*gen.DO)
	return s
}
