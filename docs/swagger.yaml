basePath: /api/v2
definitions:
  consts.Language:
    enum:
    - am
    - ar
    - as
    - af
    - bn
    - zh
    - da
    - nl
    - en
    - fi
    - fr
    - de
    - el
    - gu
    - ha
    - hi
    - ig
    - it
    - ja
    - kn
    - ko
    - ml
    - mr
    - ne
    - "no"
    - or
    - om
    - fa
    - pt
    - pa
    - ru
    - sa
    - st
    - sn
    - sd
    - so
    - es
    - sw
    - sv
    - ta
    - te
    - ts
    - tn
    - tr
    - ur
    - '-'
    - ve
    - xh
    - yo
    - zu
    type: string
    x-enum-varnames:
    - Amharic
    - Arabic
    - Assamese
    - Afrikaans
    - Bangla
    - Chinese
    - Danish
    - Dutch
    - English
    - Finnish
    - French
    - German
    - Greek
    - Gujarati
    - Hausa
    - Hindi
    - Igbo
    - Italian
    - Japanese
    - Kannada
    - Korean
    - Malayalam
    - Marathi
    - Nepali
    - Norwegian
    - Odia
    - Oromo
    - Persian
    - Portuguese
    - Punjabi
    - Russian
    - Sanskrit
    - Sesotho
    - Shona
    - Sindhi
    - Somali
    - Spanish
    - Swahili
    - Swedish
    - Tamil
    - Telugu
    - Tsonga
    - Tswana
    - Turkish
    - Urdu
    - Undefined
    - Venda
    - Xhosa
    - Yoruba
    - Zulu
  consts.Permission:
    enum:
    - 1
    - 2
    - 4
    - 8
    - 16
    - 32
    - 64
    - 128
    - 256
    - 512
    - 1024
    - 2048
    - 4096
    - 8192
    - 16384
    - 32768
    - 65536
    - 131072
    - 262144
    - 524288
    - 1048576
    - 0
    - 1
    - 327681
    - 1306753
    - 1310593
    - 1310713
    type: integer
    x-enum-comments:
      PermissionGroupADMIN: access other projects
      PermissionGroupCoordinator: randomize the submissions
      PermissionGroupJury: see the evaluation results of the evaluations they have
        done
      PermissionGroupLead: delete a campaign
    x-enum-varnames:
    - PermissionGroupBanned
    - PermissionGroupUSER
    - PermissionGroupJury
    - PermissionGroupCoordinator
    - PermissionGroupLead
    - PermissionGroupADMIN
  consts.PermissionGroup:
    enum:
    - 1
    - 2
    - 4
    - 8
    - 16
    - 32
    - 64
    - 128
    - 256
    - 512
    - 1024
    - 2048
    - 4096
    - 8192
    - 16384
    - 32768
    - 65536
    - 131072
    - 262144
    - 524288
    - 1048576
    - 0
    - 1
    - 327681
    - 1306753
    - 1310593
    - 1310713
    type: integer
    x-enum-comments:
      PermissionGroupADMIN: access other projects
      PermissionGroupCoordinator: randomize the submissions
      PermissionGroupJury: see the evaluation results of the evaluations they have
        done
      PermissionGroupLead: delete a campaign
    x-enum-varnames:
    - PermissionGroupBanned
    - PermissionGroupUSER
    - PermissionGroupJury
    - PermissionGroupCoordinator
    - PermissionGroupLead
    - PermissionGroupADMIN
  consts.PermissionMap:
    additionalProperties:
      $ref: '#/definitions/consts.Permission'
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Campaign:
    properties:
      archivedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      campaignId:
        description: A unique identifier for the campaign, it should be custom defined
        type: string
      campaignType:
        allOf:
        - $ref: '#/definitions/models.CampaignType'
        description: The type of the campaign, it should be one of the CampaignType
          constants
      createdAt:
        description: The time the campaign was created, it would be set automatically
        type: string
      createdById:
        type: string
      description:
        type: string
      endDate:
        type: string
      image:
        type: string
      isPublic:
        description: Whether the campaign is shown in the public list
        type: boolean
      language:
        $ref: '#/definitions/consts.Language'
      latestRoundId:
        type: string
      name:
        type: string
      project:
        $ref: '#/definitions/models.Project'
      projectId:
        type: string
      rounds:
        items:
          $ref: '#/definitions/models.Round'
        type: array
      rules:
        type: string
      startDate:
        type: string
      status:
        $ref: '#/definitions/models.RoundStatus'
    required:
    - campaignType
    - endDate
    - language
    - name
    - startDate
    type: object
  models.CampaignExtended:
    properties:
      archivedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      campaignId:
        description: A unique identifier for the campaign, it should be custom defined
        type: string
      campaignType:
        allOf:
        - $ref: '#/definitions/models.CampaignType'
        description: The type of the campaign, it should be one of the CampaignType
          constants
      coordinators:
        items:
          type: string
        type: array
      createdAt:
        description: The time the campaign was created, it would be set automatically
        type: string
      createdById:
        type: string
      description:
        type: string
      endDate:
        type: string
      image:
        type: string
      isPublic:
        description: Whether the campaign is shown in the public list
        type: boolean
      language:
        $ref: '#/definitions/consts.Language'
      latestRoundId:
        type: string
      name:
        type: string
      project:
        $ref: '#/definitions/models.Project'
      projectId:
        type: string
      rounds:
        items:
          $ref: '#/definitions/models.Round'
        type: array
      rules:
        type: string
      startDate:
        type: string
      status:
        $ref: '#/definitions/models.RoundStatus'
    required:
    - campaignType
    - endDate
    - language
    - name
    - startDate
    type: object
  models.CampaignType:
    enum:
    - commons
    - wikipedia
    - wikidata
    - categorization
    - reference
    type: string
    x-enum-varnames:
    - CampaignTypeCommons
    - CampaignTypeWikipedia
    - CampaignTypeWikidata
    - CampaignTypeCategorization
    - CampaignTypeReference
  models.CampaignUpdateStatusRequest:
    properties:
      isArchived:
        description: The status of the campaign
        type: boolean
    type: object
  models.CategoryResponse:
    properties:
      added:
        items:
          type: string
        type: array
      executed:
        description: Whether the categories were added or removed successfully
        type: boolean
      pageTitle:
        description: PageTitle is the title of the page where the categories were
          added or removed
        type: string
      removed:
        items:
          type: string
        type: array
    type: object
  models.Evaluation:
    properties:
      assignedAt:
        type: string
      comment:
        type: string
      distributionTaskId:
        description: Round              *Round         `json:"-" gorm:"foreignKey:RoundID;constraint:OnUpdate:CASCADE,OnDelete:CASCADE"`
        type: string
      evaluatedAt:
        type: string
      evaluationId:
        type: string
      judgeId:
        type: string
      participantId:
        type: string
      roundId:
        type: string
      score:
        $ref: '#/definitions/models.ScoreType'
      serial:
        type: integer
      skipExpirationAt:
        description: SkipExpirationAt is the time when the skip request will expire
        type: string
      submission:
        $ref: '#/definitions/models.Submission'
      submissionId:
        type: string
      type:
        $ref: '#/definitions/models.EvaluationType'
    type: object
  models.EvaluationResult:
    properties:
      averageScore:
        type: number
      submissionCount:
        type: integer
    type: object
  models.EvaluationType:
    enum:
    - ranking
    - score
    - binary
    type: string
    x-enum-varnames:
    - EvaluationTypeRanking
    - EvaluationTypeScore
    - EvaluationTypeBinary
  models.MediaType:
    enum:
    - ARTICLE
    - BITMAP
    - AUDIO
    - VIDEO
    - PDF
    type: string
    x-enum-varnames:
    - MediaTypeArticle
    - MediaTypeImage
    - MediaTypeAudio
    - MediaTypeVideo
    - MediaTypePDF
  models.PageCategory:
    properties:
      fixed:
        description: Whether the category is fixed and cannot be removed
        type: boolean
      name:
        description: The name of the category, Without the namespace
        type: string
    type: object
  models.Project:
    properties:
      createdAt:
        type: string
      createdById:
        type: string
      logoUrl:
        type: string
      name:
        type: string
      projectId:
        type: string
      url:
        description: The URL of the project's website
        type: string
    type: object
  models.ProjectExtended:
    properties:
      createdAt:
        type: string
      createdById:
        type: string
      logoUrl:
        type: string
      name:
        type: string
      projectId:
        type: string
      projectLeads:
        items:
          type: string
        type: array
      url:
        description: The URL of the project's website
        type: string
    type: object
  models.ProjectRequest:
    properties:
      logoUrl:
        type: string
      name:
        type: string
      projectId:
        type: string
      projectLeads:
        items:
          type: string
        type: array
      url:
        type: string
    required:
    - name
    type: object
  models.ResponseList-models_Campaign:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Campaign'
        type: array
      next:
        type: string
      prev:
        type: string
    type: object
  models.ResponseList-models_Evaluation:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Evaluation'
        type: array
      next:
        type: string
      prev:
        type: string
    type: object
  models.ResponseList-models_EvaluationResult:
    properties:
      data:
        items:
          $ref: '#/definitions/models.EvaluationResult'
        type: array
      next:
        type: string
      prev:
        type: string
    type: object
  models.ResponseList-models_ProjectExtended:
    properties:
      data:
        items:
          $ref: '#/definitions/models.ProjectExtended'
        type: array
      next:
        type: string
      prev:
        type: string
    type: object
  models.ResponseList-models_Round:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Round'
        type: array
      next:
        type: string
      prev:
        type: string
    type: object
  models.ResponseList-models_Submission:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Submission'
        type: array
      next:
        type: string
      prev:
        type: string
    type: object
  models.ResponseList-models_SubmissionResult:
    properties:
      data:
        items:
          $ref: '#/definitions/models.SubmissionResult'
        type: array
      next:
        type: string
      prev:
        type: string
    type: object
  models.ResponseSingle-consts_PermissionMap:
    properties:
      data:
        $ref: '#/definitions/consts.PermissionMap'
    type: object
  models.ResponseSingle-models_Campaign:
    properties:
      data:
        $ref: '#/definitions/models.Campaign'
    type: object
  models.ResponseSingle-models_CampaignExtended:
    properties:
      data:
        $ref: '#/definitions/models.CampaignExtended'
    type: object
  models.ResponseSingle-models_CategoryResponse:
    properties:
      data:
        $ref: '#/definitions/models.CategoryResponse'
    type: object
  models.ResponseSingle-models_Evaluation:
    properties:
      data:
        $ref: '#/definitions/models.Evaluation'
    type: object
  models.ResponseSingle-models_Project:
    properties:
      data:
        $ref: '#/definitions/models.Project'
    type: object
  models.ResponseSingle-models_Role:
    properties:
      data:
        $ref: '#/definitions/models.Role'
    type: object
  models.ResponseSingle-models_Round:
    properties:
      data:
        $ref: '#/definitions/models.Round'
    type: object
  models.ResponseSingle-models_Submission:
    properties:
      data:
        $ref: '#/definitions/models.Submission'
    type: object
  models.ResponseSingle-models_SubmissionWithCategoryList:
    properties:
      data:
        $ref: '#/definitions/models.SubmissionWithCategoryList'
    type: object
  models.ResponseSingle-models_Task:
    properties:
      data:
        $ref: '#/definitions/models.Task'
    type: object
  models.ResponseSingle-routes_RedirectResponse:
    properties:
      data:
        $ref: '#/definitions/routes.RedirectResponse'
    type: object
  models.ResponseSingle-routes_RoundDeletedResponse:
    properties:
      data:
        $ref: '#/definitions/routes.RoundDeletedResponse'
    type: object
  models.ResponseSingle-services_TaskResponse:
    properties:
      data:
        $ref: '#/definitions/services.TaskResponse'
    type: object
  models.Role:
    properties:
      campaignId:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      permission:
        $ref: '#/definitions/consts.PermissionGroup'
      projectId:
        type: string
      roleId:
        type: string
      roundId:
        type: string
      targetProjectId:
        type: string
      totalAssigned:
        type: integer
      totalEvaluated:
        type: integer
      totalScore:
        type: integer
      type:
        $ref: '#/definitions/models.RoleType'
      userId:
        type: string
    type: object
  models.RoleType:
    enum:
    - admin
    - projectLead
    - coordinator
    - jury
    - participant
    type: string
    x-enum-varnames:
    - RoleTypeAdmin
    - RoleTypeProjectLead
    - RoleTypeCoordinator
    - RoleTypeJury
    - RoleTypeParticipant
  models.Round:
    properties:
      allowJuryToParticipate:
        type: boolean
      allowMultipleJudgement:
        type: boolean
      allowedMediaTypes:
        items:
          $ref: '#/definitions/models.MediaType'
        type: array
      articleAllowCreations:
        type: boolean
      articleAllowExpansions:
        type: boolean
      articleMaximumSubmissionOfSameArticle:
        type: integer
      articleMinimumAddedBytes:
        type: integer
      articleMinimumAddedWords:
        type: integer
      articleMinimumTotalBytes:
        type: integer
      articleMinimumTotalWords:
        type: integer
      audioMinimumDurationMilliseconds:
        type: integer
      audioMinimumSizeBytes:
        type: integer
      blacklist:
        type: string
      campaignId:
        type: string
      createdAt:
        type: string
      createdById:
        type: string
      dependsOnRoundId:
        type: string
      description:
        type: string
      endDate:
        type: string
      imageMinimumResolution:
        type: integer
      imageMinimumSizeBytes:
        type: integer
      isOpen:
        type: boolean
      isPublicJury:
        type: boolean
      jury:
        additionalProperties:
          type: string
        type: object
      latestTaskId:
        type: string
      name:
        type: string
      projectId:
        type: string
      quorum:
        type: integer
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      roundId:
        type: string
      secretBallot:
        type: boolean
      serial:
        type: integer
      startDate:
        type: string
      status:
        $ref: '#/definitions/models.RoundStatus'
      totalAssignments:
        type: integer
      totalEvaluatedAssignments:
        type: integer
      totalEvaluatedSubmissions:
        type: integer
      totalSubmissions:
        type: integer
      type:
        $ref: '#/definitions/models.EvaluationType'
      videoMinimumDurationMilliseconds:
        type: integer
      videoMinimumResolution:
        type: integer
      videoMinimumSizeBytes:
        type: integer
    type: object
  models.RoundStatus:
    enum:
    - PENDING
    - IMPORTING
    - DISTRIBUTING
    - EVALUATING
    - REJECTED
    - CANCELLED
    - PAUSED
    - SCHEDULED
    - ACTIVE
    - COMPLETED
    type: string
    x-enum-varnames:
    - RoundStatusPending
    - RoundStatusImporting
    - RoundStatusDistributing
    - RoundStatusEvaluating
    - RoundStatusRejected
    - RoundStatusCancelled
    - RoundStatusPaused
    - RoundStatusScheduled
    - RoundStatusActive
    - RoundStatusCompleted
  models.ScoreType:
    enum:
    - 100
    type: number
    x-enum-varnames:
    - MAXIMUM_EVALUATION_SCORE
  models.SortOrder:
    enum:
    - asc
    - desc
    type: string
    x-enum-varnames:
    - SortOrderAsc
    - SortOrderDesc
  models.Submission:
    properties:
      assignmentCount:
        description: The number of times the submission has been assigned to the juries
        type: integer
      author:
        description: The Actual Author in the Wikimedia
        type: string
      bitrate:
        description: in kbps
        type: integer
      campaignId:
        type: string
      createdAtServer:
        type: string
      creditHTML:
        type: string
      currentRoundId:
        type: string
      description:
        type: string
      distributionTaskId:
        type: string
      duration:
        description: in milliseconds
        type: integer
      evaluationCount:
        description: The number of times the submission has been evaluated by the
          juries
        type: integer
      height:
        type: integer
      importTaskId:
        type: string
      license:
        type: string
      mediatype:
        $ref: '#/definitions/models.MediaType'
      metadata:
        items:
          type: integer
        type: array
      pageId:
        type: integer
      participantId:
        type: string
      resolution:
        type: integer
      score:
        allOf:
        - $ref: '#/definitions/models.ScoreType'
        description: The Average Score of the submission
      size:
        description: in bytes
        type: integer
      submissionId:
        type: string
      submittedAt:
        type: string
      submittedById:
        description: The User who submitted the article on behalf of the participant
        type: string
      thumbheight:
        type: integer
      thumburl:
        type: string
      thumbwidth:
        type: integer
      title:
        type: string
      url:
        type: string
      width:
        type: integer
    type: object
  models.SubmissionResult:
    properties:
      author:
        type: string
      juryCount:
        type: integer
      name:
        type: string
      score:
        $ref: '#/definitions/models.ScoreType'
      submissionId:
        type: string
      type:
        $ref: '#/definitions/models.MediaType'
    type: object
  models.SubmissionWithCategoryList:
    properties:
      assignmentCount:
        description: The number of times the submission has been assigned to the juries
        type: integer
      author:
        description: The Actual Author in the Wikimedia
        type: string
      bitrate:
        description: in kbps
        type: integer
      campaignId:
        type: string
      categories:
        description: List of categories associated with the submission
        items:
          $ref: '#/definitions/models.PageCategory'
        type: array
      createdAtServer:
        type: string
      creditHTML:
        type: string
      currentRoundId:
        type: string
      description:
        type: string
      distributionTaskId:
        type: string
      duration:
        description: in milliseconds
        type: integer
      evaluationCount:
        description: The number of times the submission has been evaluated by the
          juries
        type: integer
      height:
        type: integer
      importTaskId:
        type: string
      license:
        type: string
      mediatype:
        $ref: '#/definitions/models.MediaType'
      metadata:
        items:
          type: integer
        type: array
      pageId:
        type: integer
      participantId:
        type: string
      resolution:
        type: integer
      score:
        allOf:
        - $ref: '#/definitions/models.ScoreType'
        description: The Average Score of the submission
      size:
        description: in bytes
        type: integer
      submissionId:
        type: string
      submittedAt:
        type: string
      submittedById:
        description: The User who submitted the article on behalf of the participant
        type: string
      thumbheight:
        type: integer
      thumburl:
        type: string
      thumbwidth:
        type: integer
      title:
        type: string
      url:
        type: string
      width:
        type: integer
    type: object
  models.Task:
    properties:
      campaignId:
        type: string
      createdAt:
        type: string
      createdById:
        type: string
      data:
        items:
          type: integer
        type: array
      failedCount:
        type: integer
      failedIds:
        type: object
      remainingCount:
        type: integer
      roundId:
        type: string
      status:
        $ref: '#/definitions/models.TaskStatus'
      successCount:
        type: integer
      taskData:
        items:
          $ref: '#/definitions/models.TaskData'
        type: array
      taskId:
        type: string
      type:
        $ref: '#/definitions/models.TaskType'
      updatedAt:
        type: string
      userId:
        type: string
    type: object
  models.TaskData:
    properties:
      dataId:
        type: string
      isOutput:
        description: |-
          Whether this data is an input or output of the task
          For example, if the task is to import data from commons, then the input would be the
          commons data and the output would be the rejection reason
        type: boolean
      key:
        type: string
      taskId:
        description: The task ID that this data belongs to
        type: string
      value:
        type: string
    type: object
  models.TaskStatus:
    enum:
    - pending
    - running
    - success
    - failed
    type: string
    x-enum-varnames:
    - TaskStatusPending
    - TaskStatusRunning
    - TaskStatusSuccess
    - TaskStatusFailed
  models.TaskType:
    enum:
    - submissions.import.commons
    - submissions.import.previous
    - submissions.import.csv
    - assignments.distribute
    - assignments.randomize
    type: string
    x-enum-varnames:
    - TaskTypeImportFromCommons
    - TaskTypeImportFromPreviousRound
    - TaskTypeImportFromCSV
    - TaskTypeDistributeEvaluations
    - TaskTypeRandomizeAssignments
  multipart.FileHeader:
    properties:
      filename:
        type: string
      header:
        $ref: '#/definitions/textproto.MIMEHeader'
      size:
        type: integer
    type: object
  routes.ConfirmSubmitCategory:
    properties:
      categories:
        description: The Categories you want to set for the submission.
        items:
          type: string
        type: array
      summary:
        description: |-
          The Summary to be added when your edit is submitted.
          This is a required field.
        type: string
    required:
    - categories
    - summary
    type: object
  routes.ImportFromCampWizV1Request:
    properties:
      fromCampaignId:
        description: From Which Campaign ID to import
        type: integer
      fromFile:
        description: The path to the CampWiz V1 database file, must be accessible
          by the server
        type: string
      toRoundId:
        description: To which round in our system to import the images
        type: string
    required:
    - fromCampaignId
    - fromFile
    - toRoundId
    type: object
  routes.ImportFromFountainRequest:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  routes.RedirectResponse:
    properties:
      redirect:
        description: Redirect is the URL to redirect to
        type: string
    type: object
  routes.RoundDeletedResponse:
    properties:
      roundId:
        type: string
    type: object
  routes.UpdateStatusRequest:
    properties:
      status:
        $ref: '#/definitions/models.RoundStatus'
    type: object
  services.CampaignCreateRequest:
    properties:
      campaignType:
        allOf:
        - $ref: '#/definitions/models.CampaignType'
        description: The type of the campaign, it should be one of the CampaignType
          constants
      coordinators:
        items:
          type: string
        type: array
      description:
        type: string
      endDate:
        type: string
      image:
        type: string
      isPublic:
        description: Whether the campaign is shown in the public list
        type: boolean
      language:
        $ref: '#/definitions/consts.Language'
      name:
        type: string
      organizers:
        items:
          type: string
        type: array
      projectId:
        type: string
      rules:
        type: string
      startDate:
        type: string
      status:
        $ref: '#/definitions/models.RoundStatus'
    required:
    - campaignType
    - endDate
    - language
    - name
    - startDate
    type: object
  services.CampaignUpdateRequest:
    properties:
      campaignType:
        allOf:
        - $ref: '#/definitions/models.CampaignType'
        description: The type of the campaign, it should be one of the CampaignType
          constants
      coordinators:
        items:
          type: string
        type: array
      description:
        type: string
      endDate:
        type: string
      image:
        type: string
      isPublic:
        description: Whether the campaign is shown in the public list
        type: boolean
      language:
        $ref: '#/definitions/consts.Language'
      name:
        type: string
      organizers:
        items:
          type: string
        type: array
      projectId:
        type: string
      rules:
        type: string
      startDate:
        type: string
      status:
        $ref: '#/definitions/models.RoundStatus'
    required:
    - campaignType
    - endDate
    - language
    - name
    - startDate
    type: object
  services.DistributionRequest:
    properties:
      juries:
        items:
          type: string
        type: array
      sourceJuries:
        items:
          type: string
        type: array
    type: object
  services.EvaluationRequest:
    properties:
      comment:
        type: string
      description:
        type: string
      evaluationId:
        type: string
      score:
        $ref: '#/definitions/models.ScoreType'
      submissionId:
        type: string
      thumbnail:
        type: string
    type: object
  services.ImportFromCommonsPayload:
    properties:
      categories:
        description: Categories from which images will be fetched
        items:
          type: string
        type: array
    required:
    - categories
    type: object
  services.ImportFromPreviousRoundPayload:
    properties:
      roundId:
        description: RoundID from which images will be fetched
        type: string
      scores:
        description: Scores of the images to be fetched
        items:
          $ref: '#/definitions/models.ScoreType'
        type: array
    required:
    - roundId
    - scores
    type: object
  services.RoundRequest:
    properties:
      allowJuryToParticipate:
        type: boolean
      allowMultipleJudgement:
        type: boolean
      allowedMediaTypes:
        items:
          $ref: '#/definitions/models.MediaType'
        type: array
      articleAllowCreations:
        type: boolean
      articleAllowExpansions:
        type: boolean
      articleMaximumSubmissionOfSameArticle:
        type: integer
      articleMinimumAddedBytes:
        type: integer
      articleMinimumAddedWords:
        type: integer
      articleMinimumTotalBytes:
        type: integer
      articleMinimumTotalWords:
        type: integer
      audioMinimumDurationMilliseconds:
        type: integer
      audioMinimumSizeBytes:
        type: integer
      blacklist:
        type: string
      campaignId:
        type: string
      dependsOnRoundId:
        type: string
      description:
        type: string
      endDate:
        type: string
      imageMinimumResolution:
        type: integer
      imageMinimumSizeBytes:
        type: integer
      isOpen:
        type: boolean
      isPublicJury:
        type: boolean
      jury:
        items:
          type: string
        type: array
      name:
        type: string
      quorum:
        type: integer
      secretBallot:
        type: boolean
      serial:
        type: integer
      startDate:
        type: string
      type:
        $ref: '#/definitions/models.EvaluationType'
      videoMinimumDurationMilliseconds:
        type: integer
      videoMinimumResolution:
        type: integer
      videoMinimumSizeBytes:
        type: integer
    type: object
  services.TaskResponse:
    properties:
      campaignId:
        type: string
      createdAt:
        type: string
      createdById:
        type: string
      data:
        items:
          type: integer
        type: array
      failedCount:
        type: integer
      failedIds:
        type: object
      remainingCount:
        type: integer
      roundId:
        type: string
      status:
        $ref: '#/definitions/models.TaskStatus'
      successCount:
        type: integer
      taskData:
        items:
          $ref: '#/definitions/models.TaskData'
        type: array
      taskId:
        type: string
      type:
        $ref: '#/definitions/models.TaskType'
      updatedAt:
        type: string
      userId:
        type: string
    type: object
  textproto.MIMEHeader:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
info:
  contact: {}
  description: This is the API documentation for Campwiz
  title: Campwiz API
  version: "1"
paths:
  /campaign/:
    get:
      description: get all campaigns
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: ids
        type: array
      - description: Whether the campaign is closed (result have been finalized)
        in: query
        name: isClosed
        type: boolean
      - description: |-
          Whether the campaign is hidden from the public list
          If isHidden is true, then projectID is required
        in: query
        name: isHidden
        type: boolean
      - in: query
        name: limit
        type: integer
      - in: query
        name: next
        type: string
      - in: query
        name: prev
        type: string
      - description: "This projectID is the project that campaigns belong to.then
          ProjectID is required\n\t\tIf the person is not an admin, then the project
          ID must match the project ID of the user"
        in: query
        name: projectId
        type: string
      - enum:
        - asc
        - desc
        in: query
        name: sortOrder
        type: string
        x-enum-varnames:
        - SortOrderAsc
        - SortOrderDesc
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseList-models_Campaign'
      summary: List all campaigns
      tags:
      - Campaign
    post:
      description: Create a new campaign
      parameters:
      - description: The campaign request
        in: body
        name: campaignRequest
        required: true
        schema:
          $ref: '#/definitions/services.CampaignCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Campaign'
      security:
      - ApiKeyAuth: []
      summary: Create a new campaign
      tags:
      - Campaign
  /campaign/{campaignId}:
    get:
      description: Get a single campaign
      parameters:
      - description: The campaign ID
        in: path
        name: campaignId
        required: true
        type: string
      - in: query
        name: includeProject
        type: boolean
      - in: query
        name: includeRoles
        type: boolean
      - in: query
        name: includeRoundRoles
        type: boolean
      - in: query
        name: includeRounds
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_CampaignExtended'
      security:
      - ApiKeyAuth: []
      summary: Get a single campaign
      tags:
      - Campaign
  /campaign/{campaignId}/status:
    post:
      description: Update a campaign status
      parameters:
      - description: The campaign ID
        in: path
        name: campaignId
        required: true
        type: string
      - description: The campaign update status request
        in: body
        name: campaignUpdateStatusRequest
        required: true
        schema:
          $ref: '#/definitions/models.CampaignUpdateStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Campaign'
      security:
      - ApiKeyAuth: []
      summary: Update a campaign status
      tags:
      - Campaign
  /campaign/{id}:
    post:
      description: Update a campaign
      parameters:
      - description: The campaign ID
        in: path
        name: id
        required: true
        type: string
      - description: The campaign request
        in: body
        name: campaignRequest
        required: true
        schema:
          $ref: '#/definitions/services.CampaignUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Campaign'
      security:
      - ApiKeyAuth: []
      summary: Update a campaign
      tags:
      - Campaign
  /category/{submissionId}:
    get:
      description: Get categories for a submission
      parameters:
      - description: The submission ID
        in: path
        name: submissionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_SubmissionWithCategoryList'
      security:
      - ApiKeyAuth: []
      summary: Get categories for a submission
      tags:
      - Categories
    post:
      description: Submit categories for a submission. The Tool would edit on commons
        usng the token provided in the session. But the token would never be stored
        in the database.
      parameters:
      - description: The submission ID
        in: path
        name: submissionId
        required: true
        type: string
      - description: The categories to be set and the summary
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/routes.ConfirmSubmitCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_CategoryResponse'
      security:
      - ApiKeyAuth: []
      summary: Submit categories for a submission
      tags:
      - Categories
  /category/{submissionId}/preview:
    post:
      description: Submit categories preview for a submission
      parameters:
      - description: The submission ID
        in: path
        name: submissionId
        required: true
        type: string
      - description: The categories to preview
        in: body
        name: categories
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_CategoryResponse'
      security:
      - ApiKeyAuth: []
      summary: Submit categories preview for a submission
      tags:
      - Categories
  /category/uncategorized/{campaignId}:
    get:
      description: Get a list of uncategorized submissions
      parameters:
      - description: The campaign ID
        in: path
        name: campaignId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseList-models_Submission'
      security:
      - ApiKeyAuth: []
      summary: Get uncategorized submissions
      tags:
      - Categories
  /evaluation/:
    get:
      description: get all evaluations
      parameters:
      - in: query
        name: campaignId
        type: string
      - description: whether to include the submissions that were evaluated
        in: query
        name: includeEvaluated
        type: boolean
      - description: Whether to include the non-evaluated submissions
        in: query
        name: includeNonEvaluated
        type: boolean
      - description: whether to include the submissions that were skipped
        in: query
        name: includeSkipped
        type: boolean
      - description: Whether to embed the submission object
        in: query
        name: includeSubmission
        type: boolean
      - in: query
        name: juryId
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: next
        type: string
      - in: query
        name: prev
        type: string
      - in: query
        name: randomize
        type: boolean
      - in: query
        name: roundId
        type: string
      - in: query
        name: submissionId
        type: string
      - enum:
        - ranking
        - score
        - binary
        in: query
        name: type
        type: string
        x-enum-varnames:
        - EvaluationTypeRanking
        - EvaluationTypeScore
        - EvaluationTypeBinary
      - in: query
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseList-models_Evaluation'
      security:
      - ApiKeyAuth: []
      summary: List all evaluations
      tags:
      - Evaluation
    post:
      description: Bulk evaluate
      parameters:
      - description: The evaluation request
        in: body
        name: evaluationRequest
        required: true
        schema:
          items:
            $ref: '#/definitions/services.EvaluationRequest'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseList-models_Evaluation'
      security:
      - ApiKeyAuth: []
      summary: Bulk evaluate
      tags:
      - Evaluation
  /evaluation/{evaluationId}:
    get:
      description: get an evaluation
      parameters:
      - description: Evaluation ID
        in: path
        name: evaluationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Evaluation'
      security:
      - ApiKeyAuth: []
      summary: Get an evaluation
      tags:
      - Evaluation
    post:
      description: Update an evaluation
      parameters:
      - description: The evaluation ID
        in: path
        name: evaluationId
        required: true
        type: string
      - description: The evaluation request
        in: body
        name: evaluationRequest
        required: true
        schema:
          $ref: '#/definitions/services.EvaluationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Evaluation'
      security:
      - ApiKeyAuth: []
      summary: Update an evaluation
      tags:
      - Evaluation
  /evaluation/public/{roundId}:
    post:
      description: Submit a new bulk public evaluation
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      - description: The evaluation request
        in: body
        name: evaluationRequest
        required: true
        schema:
          items:
            $ref: '#/definitions/services.EvaluationRequest'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseList-models_Evaluation'
      security:
      - ApiKeyAuth: []
      summary: Submit a new bulk public evaluation
      tags:
      - Evaluation
  /evaluation/public/{roundId}/{submissionId}:
    post:
      description: Submit a new public evaluation
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      - description: The submission ID
        in: path
        name: submissionId
        required: true
        type: string
      - description: The evaluation request
        in: body
        name: evaluationRequest
        required: true
        schema:
          $ref: '#/definitions/services.EvaluationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Evaluation'
      security:
      - ApiKeyAuth: []
      summary: Submit a new public evaluation
      tags:
      - Evaluation
  /permissions:
    get:
      description: Get the permission map
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-consts_PermissionMap'
      summary: Get the permission map
      tags:
      - Permissions
  /project/:
    get:
      description: List all projects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseList-models_ProjectExtended'
      security:
      - ApiKeyAuth: []
      summary: List all projects
      tags:
      - Project
    post:
      description: Create a new project
      parameters:
      - description: The project request
        in: body
        name: projectRequest
        required: true
        schema:
          $ref: '#/definitions/models.ProjectRequest'
      - description: Include project leads
        in: query
        name: includeProjectLeads
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Project'
      security:
      - ApiKeyAuth: []
      summary: Create a new project
      tags:
      - Project
  /project/{projectId}:
    get:
      description: Get a single project
      parameters:
      - description: The project ID
        in: path
        name: projectId
        required: true
        type: string
      - description: Include project leads
        in: query
        name: includeProjectLeads
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Project'
      security:
      - ApiKeyAuth: []
      summary: Get a single project
      tags:
      - Project
    post:
      description: Update a project
      parameters:
      - description: The project ID
        in: path
        name: projectId
        required: true
        type: string
      - description: The project request
        in: body
        name: projectRequest
        required: true
        schema:
          $ref: '#/definitions/models.ProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Project'
      security:
      - ApiKeyAuth: []
      summary: Update a project
      tags:
      - Project
  /round/:
    get:
      description: get all rounds
      parameters:
      - in: query
        name: campaignId
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: next
        type: string
      - in: query
        name: prev
        type: string
      - enum:
        - PENDING
        - IMPORTING
        - DISTRIBUTING
        - EVALUATING
        - REJECTED
        - CANCELLED
        - PAUSED
        - SCHEDULED
        - ACTIVE
        - COMPLETED
        in: query
        name: status
        type: string
        x-enum-varnames:
        - RoundStatusPending
        - RoundStatusImporting
        - RoundStatusDistributing
        - RoundStatusEvaluating
        - RoundStatusRejected
        - RoundStatusCancelled
        - RoundStatusPaused
        - RoundStatusScheduled
        - RoundStatusActive
        - RoundStatusCompleted
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseList-models_Round'
      security:
      - ApiKeyAuth: []
      summary: List all rounds
      tags:
      - Round
    post:
      description: Create a new round for a campaign
      parameters:
      - description: The round request
        in: body
        name: roundRequest
        required: true
        schema:
          $ref: '#/definitions/services.RoundRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Round'
      security:
      - ApiKeyAuth: []
      summary: Create a new round
      tags:
      - Round
  /round/{roundId}:
    delete:
      description: Delete a round
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-routes_RoundDeletedResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a round
      tags:
      - Round
    get:
      description: Get a round
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Round'
      security:
      - ApiKeyAuth: []
      summary: Get a round
      tags:
      - Round
    post:
      description: Update the details of a round
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      - description: The round request
        in: body
        name: roundRequest
        required: true
        schema:
          $ref: '#/definitions/services.RoundRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Round'
      security:
      - ApiKeyAuth: []
      summary: Update the details of a round
      tags:
      - Round
  /round/{roundId}/jury:
    post:
      description: Add the current user as a jury for the round
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Role'
      security:
      - ApiKeyAuth: []
      summary: Add myself as a jury
      tags:
      - Round
  /round/{roundId}/next/evaluation:
    get:
      description: Get the next submission evaluation for a jury
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseList-models_Evaluation'
      security:
      - ApiKeyAuth: []
      summary: Get the next submission evaluation
      tags:
      - Round
  /round/{roundId}/next/public:
    get:
      description: Get the next public submission for a jury
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Submission'
      security:
      - ApiKeyAuth: []
      summary: Get the next public submission
      tags:
      - Round
  /round/{roundId}/randomize:
    post:
      description: Randomize the evaluation distribution
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Task'
      summary: Randomize the evaluation distribution
      tags:
      - Round
  /round/{roundId}/results/{format}:
    get:
      description: Get results of a round
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      - description: The format of the results
        enum:
        - csv
        - json
        in: path
        name: format
        required: true
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: next
        type: string
      - in: query
        name: prev
        type: string
      - collectionFormat: csv
        in: query
        items:
          enum:
          - ARTICLE
          - BITMAP
          - AUDIO
          - VIDEO
          - PDF
          type: string
        name: type
        type: array
      produces:
      - application/json
      - text/csv
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseList-models_SubmissionResult'
      security:
      - ApiKeyAuth: []
      summary: Get results of a round
      tags:
      - Round
  /round/{roundId}/results/summary:
    get:
      description: Get results of a round
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseList-models_EvaluationResult'
      security:
      - ApiKeyAuth: []
      summary: Get results of a round
      tags:
      - Round
  /round/{roundId}/status:
    post:
      description: Update the status of a round
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      - description: The status request
        in: body
        name: UpdateStatusRequest
        required: true
        schema:
          $ref: '#/definitions/routes.UpdateStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Round'
      security:
      - ApiKeyAuth: []
      - ApiKeyAuth: []
      summary: Update the status of a round
      tags:
      - Round
  /round/distribute/{roundId}:
    post:
      description: Distribute evaluations to juries
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      - description: The distribution request
        in: body
        name: DistributionRequest
        required: true
        schema:
          $ref: '#/definitions/services.DistributionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Task'
      security:
      - ApiKeyAuth: []
      summary: Distribute evaluations to juries
      tags:
      - Round
  /round/import/{roundId}/campwizv1:
    post:
      description: The user would provide a round ID and a CampWiz V1 database file
        and the system would import images from that file
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      - description: The import from CampWiz V1 request
        in: body
        name: ImportFromCampWizV1Request
        required: true
        schema:
          $ref: '#/definitions/routes.ImportFromCampWizV1Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Task'
      security:
      - ApiKeyAuth: []
      summary: Import images from CampWiz V1
      tags:
      - Round
  /round/import/{roundId}/commons:
    post:
      description: The user would provide a round ID and a list of commons categories
        and the system would import images from those categories
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      - description: The import from commons request
        in: body
        name: ImportFromCommons
        required: true
        schema:
          $ref: '#/definitions/services.ImportFromCommonsPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Task'
      security:
      - ApiKeyAuth: []
      summary: Import images from commons
      tags:
      - Round
  /round/import/{roundId}/csv:
    post:
      description: The user would provide a round ID and a CSV file path and the system
        would import images from that CSV file
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      - description: The column name of the file name (if exists, it is the slowest
          way to import. **Not recommended**)
        in: formData
        name: fileNameColumn
        type: string
      - description: The column name of the page ID (if exists, it is the second fastest
          way to import)
        in: formData
        name: pageIdColumn
        type: string
      - description: The column name of the submission ID (if exists, it is the fastest
          way to import. **Highly recommended**)
        in: formData
        name: submissionIdColumn
        type: string
      - description: The CSV file (upto 10MB CSV)
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Task'
      security:
      - ApiKeyAuth: []
      summary: Import images from CSV
      tags:
      - Round
  /round/import/{roundId}/fountain:
    post:
      description: The user would provide a round ID and a code and the system would
        import images from that Fountain
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      - description: The import from Fountain request
        in: body
        name: ImportFromFountainRequest
        required: true
        schema:
          $ref: '#/definitions/routes.ImportFromFountainRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Task'
      security:
      - ApiKeyAuth: []
      summary: Import images from Fountain
      tags:
      - Round
  /round/import/{targetRoundId}/previous:
    post:
      description: The user would provide a round ID and a list of scores and the
        system would import images from the previous round with those scores
      parameters:
      - description: The target round ID, where the images will be imported
        in: path
        name: targetRoundId
        required: true
        type: string
      - description: The import from previous round request
        in: body
        name: ImportFromPreviousRoundPayload
        required: true
        schema:
          $ref: '#/definitions/services.ImportFromPreviousRoundPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-models_Task'
      security:
      - ApiKeyAuth: []
      summary: Import images from previous round
      tags:
      - Round
  /submission/:
    get:
      description: get all submissions
      parameters:
      - in: query
        name: campaignId
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: next
        type: string
      - in: query
        name: participantId
        type: string
      - in: query
        name: prev
        type: string
      - in: query
        name: roundId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseList-models_Submission'
      summary: List all submissions
      tags:
      - Submission
  /submission/{id}:
    get:
      description: get a submission
      parameters:
      - description: Submission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Submission'
      summary: Get a submission
      tags:
      - Submission
  /task/{taskId}:
    get:
      description: The task represents a background job that can be run by the system
      parameters:
      - description: The task ID
        in: path
        name: taskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-services_TaskResponse'
      summary: Get a task by ID
      tags:
      - Task
  /task/{taskId}/stream:
    get:
      description: The task represents a background job that can be run by the system.
        This endpoint streams the response
      parameters:
      - description: The task ID
        in: path
        name: taskId
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get a task by ID but stream the response
      tags:
      - Task
  /user/callback:
    get:
      description: Handle the OAuth2 callback
      parameters:
      - description: The code from the OAuth2 provider
        in: query
        name: code
        required: true
        type: string
      - description: The state
        in: query
        name: state
        type: string
      - description: The base URL
        in: query
        name: baseURL
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-routes_RedirectResponse'
      summary: Handle the OAuth2 callback
      tags:
      - User
  /user/callback/write:
    get:
      description: Handle the OAuth2 callback for the ReadWrite scope. This endpoint
        would fetch an access token and set it as a cookie, it would not, by any means,
        store it on the server. Refresh Token would also be set as a cookie.
      parameters:
      - description: The code from the OAuth2 provider
        in: query
        name: code
        required: true
        type: string
      - description: The state
        in: query
        name: state
        type: string
      - description: The base URL
        in: query
        name: baseURL
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-routes_RedirectResponse'
      summary: Handle the OAuth2 callback for ReadWrite scope
      tags:
      - User
  /user/login:
    get:
      description: Redirect to the OAuth2 login for ReadOnly scope
      parameters:
      - description: The callback URL
        in: query
        name: callback
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-routes_RedirectResponse'
      summary: Redirect to the OAuth2 login ReadOnly scope
      tags:
      - User
  /user/login/write:
    get:
      description: Redirect to the OAuth2 login for ReadWrite scope.
      parameters:
      - description: The callback URL
        in: query
        name: callback
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSingle-routes_RedirectResponse'
      summary: Redirect to the OAuth2 login
      tags:
      - User
produces:
- application/json
securityDefinitions:
  ApiKeyAuth:
    description: Authentication cookie for the API. It would be set by the server
      when the user logs in.
    in: cookie
    name: c-auth
    type: apiKey
swagger: "2.0"
